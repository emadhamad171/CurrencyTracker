// server/src/controllers/priceAlertsController.js
const admin = require('firebase-admin');
const axios = require('axios');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ)
if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert({
      projectId: process.env.FIREBASE_PROJECT_ID,
      privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
      clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
    }),
  });
}

const db = admin.firestore();

// ====== –°–û–ó–î–ê–ù–ò–ï –ê–õ–ï–†–¢–ê ======
const createPriceAlert = async (req, res) => {
  try {
    const {
      userId,
      currencyPair, // 'USDUAH' | 'EURUAH'
      alertType, // 'above' | 'below'
      targetPrice,
      pushToken, // Expo push token
      isActive = true,
    } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!userId || !currencyPair || !alertType || !targetPrice || !pushToken) {
      return res.status(400).json({
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è',
        required: [
          'userId',
          'currencyPair',
          'alertType',
          'targetPrice',
          'pushToken',
        ],
      });
    }

    if (!['USDUAH', 'EURUAH'].includes(currencyPair)) {
      return res.status(400).json({
        error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞',
        supported: ['USDUAH', 'EURUAH'],
      });
    }

    if (!['above', 'below'].includes(alertType)) {
      return res.status(400).json({
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞',
        supported: ['above', 'below'],
      });
    }

    if (targetPrice <= 0) {
      return res.status(400).json({
        error: '–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0',
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const currentRates = await getCurrentExchangeRates();
    const currentPrice = currentRates[currencyPair]?.market;

    if (!currentPrice) {
      return res.status(500).json({
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç',
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å –∞–ª–µ—Ä—Ç–∞
    if (alertType === 'above' && targetPrice <= currentPrice) {
      console.warn(
        `‚ö†Ô∏è Alert above ${targetPrice} but current price is ${currentPrice}`,
      );
    }
    if (alertType === 'below' && targetPrice >= currentPrice) {
      console.warn(
        `‚ö†Ô∏è Alert below ${targetPrice} but current price is ${currentPrice}`,
      );
    }

    // –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç –≤ Firestore
    const alertData = {
      userId,
      currencyPair,
      alertType,
      targetPrice: parseFloat(targetPrice),
      pushToken,
      isActive,
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      triggeredAt: null,
      currentPriceAtCreation: currentPrice,
      lastChecked: admin.firestore.FieldValue.serverTimestamp(),
    };

    const docRef = await db.collection('priceAlerts').add(alertData);

    console.log(`‚úÖ Price alert created: ${docRef.id} for user ${userId}`);

    res.status(201).json({
      success: true,
      alertId: docRef.id,
      message: `–ê–ª–µ—Ä—Ç —Å–æ–∑–¥–∞–Ω: ${currencyPair} ${alertType === 'above' ? '–≤—ã—à–µ' : '–Ω–∏–∂–µ'} ${targetPrice}‚Ç¥`,
      data: {
        ...alertData,
        id: docRef.id,
        createdAt: new Date().toISOString(),
      },
    });
  } catch (error) {
    console.error('‚ùå Create alert error:', error);
    res.status(500).json({
      error: 'Error occured while creating alert',
      message: error.message,
    });
  }
};

// ====== –ü–û–õ–£–ß–ï–ù–ò–ï –ê–õ–ï–†–¢–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ======
// server/src/controllers/priceAlertsController.js - –£–ü–†–û–©–ï–ù–ù–´–ï –ó–ê–ü–†–û–°–´

// ====== –ü–û–õ–£–ß–ï–ù–ò–ï –ê–õ–ï–†–¢–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (–ë–ï–ó –°–û–†–¢–ò–†–û–í–ö–ò) ======
const getUserAlerts = async (req, res) => {
  console.log('üì• GET USER ALERTS REQUEST:', {
    params: req.params,
    query: req.query,
  });

  try {
    const { userId } = req.params;

    if (!userId) {
      console.error('‚ùå Missing userId parameter');
      return res.status(400).json({
        error: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
      });
    }

    console.log('üîç Getting alerts for userId:', userId);

    // ‚úÖ –£–ü–†–û–©–ï–ù–ù–´–ô –ó–ê–ü–†–û–° –ë–ï–ó orderBy (–ù–ï –¢–†–ï–ë–£–ï–¢ –ò–ù–î–ï–ö–°–ê)
    const alertsSnapshot = await db
      .collection('priceAlerts')
      .where('userId', '==', userId)
      .get();

    console.log('üìä Found alerts:', alertsSnapshot.size);

    const alerts = [];
    alertsSnapshot.forEach((doc) => {
      const data = doc.data();
      console.log('üìÑ Processing alert:', doc.id, {
        currencyPair: data.currencyPair,
        targetPrice: data.targetPrice,
        isActive: data.isActive,
      });

      alerts.push({
        id: doc.id,
        ...data,
        // ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û–ï –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï TIMESTAMP
        createdAt: data.createdAt?.toDate
          ? data.createdAt.toDate().toISOString()
          : new Date().toISOString(),
        triggeredAt: data.triggeredAt?.toDate
          ? data.triggeredAt.toDate().toISOString()
          : null,
        lastChecked: data.lastChecked?.toDate
          ? data.lastChecked.toDate().toISOString()
          : new Date().toISOString(),
      });
    });

    // ‚úÖ –°–û–†–¢–ò–†–û–í–ö–ê –ù–ê –ö–õ–ò–ï–ù–¢–ï (–ü–û–°–õ–ï –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–•)
    alerts.sort(
      (a, b) =>
        new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime(),
    );

    console.log('‚úÖ Processed and sorted alerts:', alerts.length);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞
    console.log('üí± Getting current rates for status calculation...');
    let currentRates;
    try {
      currentRates = await getCurrentExchangeRates();
      console.log('üí± Current rates loaded:', Object.keys(currentRates));
    } catch (ratesError) {
      console.warn('‚ö†Ô∏è Failed to load current rates:', ratesError.message);
      currentRates = {
        USDUAH: { market: 41.8 },
        EURUAH: { market: 44.6 },
      };
    }

    // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –°–¢–ê–¢–£–° –ò –¢–ï–ö–£–©–ò–ï –¶–ï–ù–´ –ö –ö–ê–ñ–î–û–ú–£ –ê–õ–ï–†–¢–£
    const alertsWithStatus = alerts.map((alert) => {
      const currentPrice = currentRates[alert.currencyPair]?.market;
      const status = getAlertStatus(alert, currentPrice);
      const distanceToTarget = calculateDistanceToTarget(alert, currentPrice);

      return {
        ...alert,
        currentPrice,
        status,
        distanceToTarget,
      };
    });

    console.log('‚úÖ Enhanced alerts with status:', alertsWithStatus.length);

    res.json({
      success: true,
      count: alerts.length,
      alerts: alertsWithStatus,
    });
  } catch (error) {
    console.error('‚ùå GET USER ALERTS ERROR:', error);
    console.error('‚ùå Error stack:', error.stack);

    res.status(500).json({
      error: 'Error occurred while receiving alerts',
      message: error.message,
      timestamp: new Date().toISOString(),
    });
  }
};

// ====== –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò (–£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø) ======
const getAlertsStats = async (req, res) => {
  console.log('üì• GET ALERTS STATS REQUEST:', {
    params: req.params,
  });

  try {
    const { userId } = req.params;

    if (!userId) {
      console.error('‚ùå Missing userId parameter');
      return res.status(400).json({
        error: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
      });
    }

    console.log('üìä Getting stats for userId:', userId);

    // ‚úÖ –û–î–ò–ù –ü–†–û–°–¢–û–ô –ó–ê–ü–†–û–° –ë–ï–ó –°–õ–û–ñ–ù–´–• –£–°–õ–û–í–ò–ô
    const allAlertsSnapshot = await db
      .collection('priceAlerts')
      .where('userId', '==', userId)
      .get();

    let activeCount = 0;
    let triggeredCount = 0;
    const byPair = {
      USDUAH: { active: 0, triggered: 0 },
      EURUAH: { active: 0, triggered: 0 },
    };

    // ‚úÖ –ü–û–î–°–ß–ï–¢ –ù–ê –ö–õ–ò–ï–ù–¢–ï
    allAlertsSnapshot.forEach((doc) => {
      const data = doc.data();

      if (data.isActive) {
        activeCount++;
        if (byPair[data.currencyPair]) {
          byPair[data.currencyPair].active++;
        }
      }

      if (data.triggeredAt) {
        triggeredCount++;
        if (byPair[data.currencyPair]) {
          byPair[data.currencyPair].triggered++;
        }
      }
    });

    const stats = {
      active: activeCount,
      triggered: triggeredCount,
      total: allAlertsSnapshot.size,
      byPair,
    };

    console.log('‚úÖ Stats calculated:', stats);

    res.json({
      success: true,
      stats,
    });
  } catch (error) {
    console.error('‚ùå GET STATS ERROR:', error);
    console.error('‚ùå Error stack:', error.stack);

    res.status(500).json({
      error: 'Error occurred while receiving stats',
      message: error.message,
      timestamp: new Date().toISOString(),
    });
  }
};

// ====== –£–î–ê–õ–ï–ù–ò–ï –ê–õ–ï–†–¢–ê ======
const deleteAlert = async (req, res) => {
  try {
    const { alertId } = req.params;
    const { userId } = req.body;

    if (!alertId || !userId) {
      return res.status(400).json({
        error: 'alertId –∏ userId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã',
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–ª–µ—Ä—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const alertDoc = await db.collection('priceAlerts').doc(alertId).get();

    if (!alertDoc.exists) {
      return res.status(404).json({
        error: '–ê–ª–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
      });
    }

    const alertData = alertDoc.data();
    if (alertData.userId !== userId) {
      return res.status(403).json({
        error: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –∞–ª–µ—Ä—Ç–∞',
      });
    }

    await db.collection('priceAlerts').doc(alertId).delete();

    console.log(`üóëÔ∏è Alert deleted: ${alertId} by user ${userId}`);

    res.json({
      success: true,
      message: '–ê–ª–µ—Ä—Ç —É–¥–∞–ª–µ–Ω',
    });
  } catch (error) {
    console.error('‚ùå Delete alert error:', error);
    res.status(500).json({
      error: 'Error occurred trying to delete alert',
      message: error.message,
    });
  }
};

// ====== –ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–ö–£–©–ò–• –ö–£–†–°–û–í (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π API) ======
const getCurrentExchangeRates = async () => {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –∏–∑ currencyController
    const response = await axios.get(
      `${process.env.API_BASE_URL || 'http://localhost:3001'}/api/dashboard/fundamental`,
      {
        timeout: 10000,
      },
    );

    if (
      response.data &&
      response.data.indicators &&
      response.data.indicators.currentRates
    ) {
      return response.data.indicators.currentRates;
    }

    // Fallback
    return {
      USDUAH: { official: 41.2, market: 41.8 },
      EURUAH: { official: 44.1, market: 44.6 },
    };
  } catch (error) {
    console.error('‚ùå Error getting current rates:', error.message);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ
    return {
      USDUAH: { official: 41.2, market: 41.8 },
      EURUAH: { official: 44.1, market: 44.6 },
    };
  }
};

// ====== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ======
const getAlertStatus = (alert, currentPrice) => {
  if (!currentPrice) {
    return 'unknown';
  }
  if (alert.triggeredAt) {
    return 'triggered';
  }
  if (!alert.isActive) {
    return 'inactive';
  }

  const { alertType, targetPrice } = alert;

  if (alertType === 'above') {
    if (currentPrice >= targetPrice) {
      return 'ready_to_trigger';
    }
    const distance = ((targetPrice - currentPrice) / currentPrice) * 100;
    if (distance <= 2) {
      return 'close';
    }
    return 'waiting';
  } else {
    if (currentPrice <= targetPrice) {
      return 'ready_to_trigger';
    }
    const distance = ((currentPrice - targetPrice) / currentPrice) * 100;
    if (distance <= 2) {
      return 'close';
    }
    return 'waiting';
  }
};

const calculateDistanceToTarget = (alert, currentPrice) => {
  if (!currentPrice) {
    return null;
  }

  const distance = Math.abs(currentPrice - alert.targetPrice);
  const percentage = (distance / currentPrice) * 100;

  return {
    absolute: parseFloat(distance.toFixed(2)),
    percentage: parseFloat(percentage.toFixed(2)),
    direction: currentPrice > alert.targetPrice ? 'above' : 'below',
  };
};

const sendExpoPushNotification = async (pushToken, title, body, data = {}) => {
  try {
    console.log(
      'üì± Sending push notification to:',
      `${pushToken.substring(0, 20)}...`,
    );

    // –ï—Å–ª–∏ —ç—Ç–æ fallback —Ç–æ–∫–µ–Ω - —Å–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
    if (pushToken.startsWith('fallback_')) {
      console.log('üîÑ Simulating push for fallback token:', { title, body });
      return { success: true, simulated: true };
    }

    // ‚úÖ –û–¢–ü–†–ê–í–ö–ê –ß–ï–†–ï–ó EXPO PUSH API
    const message = {
      to: pushToken,
      sound: 'default',
      title,
      body,
      data: {
        ...data,
        type: 'price_alert',
      },
      priority: 'high',
      channelId: 'price-alerts',
    };

    const response = await axios.post(
      'https://exp.host/--/api/v2/push/send',
      message,
      {
        headers: {
          Accept: 'application/json',
          'Accept-encoding': 'gzip, deflate',
          'Content-Type': 'application/json',
        },
        timeout: 10000,
      },
    );

    if (response.data.errors) {
      console.error('‚ùå Expo push errors:', response.data.errors);
      return { success: false, errors: response.data.errors };
    }

    console.log('‚úÖ Push notification sent successfully');
    return { success: true, receipt: response.data };
  } catch (error) {
    console.error('‚ùå Error sending push notification:', error.message);
    return { success: false, error: error.message };
  }
};

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø checkAndSendAlerts –° PUSH –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú–ò
const checkAndSendAlerts = async () => {
  console.log('üîç Starting price alerts check...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã
    console.log('üí± Getting current exchange rates...');
    let currentRates;
    try {
      const response = await axios.get(
        'http://localhost:5001/api/fundamental-analysis',
        {
          timeout: 10000,
        },
      );
      currentRates = response.data?.indicators?.currentRates;
      console.log(
        'üí± Current rates loaded:',
        currentRates ? Object.keys(currentRates) : 'No rates',
      );
    } catch (ratesError) {
      console.error('‚ùå Error getting current rates:', ratesError.message);
      return { success: false, error: 'Failed to get current rates' };
    }

    if (!currentRates) {
      console.error('‚ùå No current rates available');
      return { success: false, error: 'No current rates available' };
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
    const alertsSnapshot = await db
      .collection('priceAlerts')
      .where('isActive', '==', true)
      .where('triggeredAt', '==', null)
      .get();

    console.log(`üìä Checking ${alertsSnapshot.size} active alerts...`);

    let triggeredCount = 0;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∞–ª–µ—Ä—Ç
    for (const alertDoc of alertsSnapshot.docs) {
      const alert = alertDoc.data();
      const alertId = alertDoc.id;

      const currentPrice = currentRates[alert.currencyPair]?.market;
      if (!currentPrice) {
        console.warn(`‚ö†Ô∏è No current price for ${alert.currencyPair}`);
        continue;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
      let shouldTrigger = false;
      if (alert.alertType === 'above' && currentPrice >= alert.targetPrice) {
        shouldTrigger = true;
      } else if (
        alert.alertType === 'below' &&
        currentPrice <= alert.targetPrice
      ) {
        shouldTrigger = true;
      }

      if (shouldTrigger) {
        console.log(
          `üéØ Alert triggered! ${alert.currencyPair} ${alert.alertType} ${alert.targetPrice} (current: ${currentPrice})`,
        );

        // –û–¢–ü–†–ê–í–õ–Ø–ï–ú PUSH –£–í–ï–î–û–ú–õ–ï–ù–ò–ï
        const pushTitle = 'üí∞ –ê–ª–µ—Ä—Ç –ø–æ –∫—É—Ä—Å—É –≤–∞–ª—é—Ç!';
        const pushBody = `${alert.currencyPair}: ${currentPrice.toFixed(2)}‚Ç¥ (—Ü–µ–ª—å: ${alert.targetPrice}‚Ç¥)`;

        const pushResult = await sendExpoPushNotification(
          alert.pushToken,
          pushTitle,
          pushBody,
          {
            currencyPair: alert.currencyPair,
            currentPrice,
            targetPrice: alert.targetPrice,
            alertType: alert.alertType,
          },
        );

        console.log('üì± Push notification result:', pushResult);

        // –ü–æ–º–µ—á–∞–µ–º –∞–ª–µ—Ä—Ç –∫–∞–∫ —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏–π
        await db
          .collection('priceAlerts')
          .doc(alertId)
          .update({
            triggeredAt: admin.firestore.FieldValue.serverTimestamp(),
            isActive: false,
            triggerPrice: currentPrice,
            pushSent: pushResult.success,
            pushError: pushResult.success ? null : pushResult.error,
          });

        triggeredCount++;
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await db.collection('priceAlerts').doc(alertId).update({
          lastChecked: admin.firestore.FieldValue.serverTimestamp(),
        });
      }
    }

    const result = {
      success: true,
      checked: alertsSnapshot.size,
      triggered: triggeredCount,
      timestamp: new Date().toISOString(),
    };

    console.log('‚úÖ Alerts check completed:', result);
    return result;
  } catch (error) {
    console.error('‚ùå Error in checkAndSendAlerts:', error);
    return { success: false, error: error.message };
  }
};

module.exports = {
  createPriceAlert,
  getUserAlerts,
  deleteAlert,
  checkAndSendAlerts,
  getAlertsStats,
  sendExpoPushNotification,
  getCurrentExchangeRates,
};
