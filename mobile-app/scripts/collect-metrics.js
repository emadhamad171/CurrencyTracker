const fs = require('fs');
const { execSync } = require('child_process');

console.log('üìä –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –¥–ª—è –¥–∏–ø–ª–æ–º–∞...\n');

// –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –æ—Ç—á–µ—Ç–æ–≤
if (!fs.existsSync('reports')) {
  fs.mkdirSync('reports');
}

// –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
const runCommand = (command, description) => {
  try {
    console.log(`‚è≥ ${description}...`);
    const result = execSync(command, { encoding: 'utf8', stdio: 'pipe' });
    console.log(`‚úÖ ${description} - –≥–æ—Ç–æ–≤–æ`);
    return result;
  } catch (error) {
    console.log(`‚ö†Ô∏è  ${description} - –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã`);
    return error.stdout || '';
  }
};

// 1. ESLint –∞–Ω–∞–ª–∏–∑
runCommand('npm run lint:json', 'ESLint JSON –æ—Ç—á–µ—Ç');
runCommand('npm run lint:html', 'ESLint HTML –æ—Ç—á–µ—Ç');

// 2. TypeScript –ø—Ä–æ–≤–µ—Ä–∫–∞
runCommand('npm run type-check > reports/typescript.txt 2>&1', 'TypeScript –ø—Ä–æ–≤–µ—Ä–∫–∞');

// 3. Prettier –ø—Ä–æ–≤–µ—Ä–∫–∞
runCommand('npm run format:check > reports/prettier.txt 2>&1', 'Prettier –ø—Ä–æ–≤–µ—Ä–∫–∞');

// 4. –ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫
const analyzeMetrics = () => {
  try {
    const eslintData = JSON.parse(fs.readFileSync('reports/eslint-report.json', 'utf8'));

    const metrics = {
      timestamp: new Date().toISOString(),
      summary: {
        totalFiles: eslintData.length,
        totalErrors: eslintData.reduce((sum, file) => sum + file.errorCount, 0),
        totalWarnings: eslintData.reduce((sum, file) => sum + file.warningCount, 0),
        filesWithIssues: eslintData.filter(f => f.errorCount > 0 || f.warningCount > 0).length,
      },
      fileDetails: eslintData.map(file => ({
        file: file.filePath.replace(process.cwd(), ''),
        errors: file.errorCount,
        warnings: file.warningCount,
        lines: file.source ? file.source.split('\n').length : 0,
      })),
      ruleBreakdown: {},
    };

    // –ü–æ–¥—Å—á–µ—Ç –æ—à–∏–±–æ–∫ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
    eslintData.forEach(file => {
      file.messages.forEach(msg => {
        if (!metrics.ruleBreakdown[msg.ruleId]) {
          metrics.ruleBreakdown[msg.ruleId] = 0;
        }
        metrics.ruleBreakdown[msg.ruleId]++;
      });
    });

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏
    fs.writeFileSync('reports/metrics.json', JSON.stringify(metrics, null, 2));

    // –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π HTML –æ—Ç—á–µ—Ç
    const htmlReport = `
<!DOCTYPE html>
<html>
<head>
    <title>–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞</title>
    <style>
        body { font-family: Arial; margin: 20px; }
        .metric { background: #f5f5f5; padding: 15px; margin: 10px 0; border-radius: 5px; }
        .good { border-left: 5px solid #28a745; }
        .warning { border-left: 5px solid #ffc107; }
        .error { border-left: 5px solid #dc3545; }
        table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
</head>
<body>
    <h1>üìä –û—Ç—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞</h1>
    <p>–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}</p>
    
    <div class="metric ${metrics.summary.totalErrors === 0 ? 'good' : 'error'}">
        <h3>–û—à–∏–±–∫–∏ ESLint: ${metrics.summary.totalErrors}</h3>
        <p>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ</p>
    </div>
    
    <div class="metric ${metrics.summary.totalWarnings < 5 ? 'good' : 'warning'}">
        <h3>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ESLint: ${metrics.summary.totalWarnings}</h3>
        <p>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã</p>
    </div>
    
    <div class="metric good">
        <h3>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${metrics.summary.totalFiles}</h3>
        <p>–§–∞–π–ª–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: ${metrics.summary.filesWithIssues}</p>
    </div>

    <h2>üìÅ –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã</h2>
    <table>
        <tr><th>–§–∞–π–ª</th><th>–û—à–∏–±–∫–∏</th><th>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è</th></tr>
        ${metrics.fileDetails
          .filter(f => f.errors > 0 || f.warnings > 0)
          .map(f => `<tr><td>${f.file}</td><td>${f.errors}</td><td>${f.warnings}</td></tr>`)
          .join('')}
    </table>

    <h2>üìã –¢–æ–ø –Ω–∞—Ä—É—à–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª</h2>
    <table>
        <tr><th>–ü—Ä–∞–≤–∏–ª–æ</th><th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th></tr>
        ${Object.entries(metrics.ruleBreakdown)
          .sort(([, a], [, b]) => b - a)
          .slice(0, 10)
          .map(([rule, count]) => `<tr><td>${rule}</td><td>${count}</td></tr>`)
          .join('')}
    </table>
</body>
</html>`;

    fs.writeFileSync('reports/metrics.html', htmlReport);

    console.log('\nüìà –ò–¢–û–ì–û–í–´–ï –ú–ï–¢–†–ò–ö–ò:');
    console.log(`üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${metrics.summary.totalFiles}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${metrics.summary.totalErrors}`);
    console.log(`‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${metrics.summary.totalWarnings}`);
    console.log(`üî• –§–∞–π–ª–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: ${metrics.summary.filesWithIssues}`);
    console.log(
      `‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞: ${Math.round(((metrics.summary.totalFiles - metrics.summary.filesWithIssues) / metrics.summary.totalFiles) * 100)}%`
    );
  } catch (error) {
    console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å ESLint –æ—Ç—á–µ—Ç');
  }
};

analyzeMetrics();

console.log('\nüéâ –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!');
console.log('üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É reports/');
console.log('üåê –û—Ç–∫—Ä–æ–π—Ç–µ reports/metrics.html –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞');
