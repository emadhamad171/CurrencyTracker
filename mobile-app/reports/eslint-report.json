[{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/.prettierrc.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/@types/env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/app/(tabs)/_layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/app/(tabs)/alerts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/app/(tabs)/converter.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'ConverterScreen' has too many lines (261). Maximum allowed is 150.","line":39,"column":16,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":299,"endColumn":2},{"ruleId":"complexity","severity":2,"message":"Function 'ConverterScreen' has a complexity of 30. Maximum allowed is 15.","line":39,"column":16,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":299,"endColumn":2}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// app/(tabs)/converter.tsx - Главный файл\nimport React, { useState, useEffect, useMemo } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ActivityIndicator,\n  ScrollView,\n  RefreshControl,\n  TouchableOpacity,\n  TextInput,\n} from 'react-native';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nimport { useColorScheme } from '../../hooks/useColorScheme';\nimport {\n  fetchConverterRates,\n  setFromCurrency,\n  setToCurrency,\n  setAmount,\n  swapCurrencies,\n  selectConverterRates,\n  selectConverterCurrencies,\n  selectConverterLoading,\n  selectConverterError,\n  selectConverterLastUpdated,\n  selectFromCurrency,\n  selectToCurrency,\n  selectAmount,\n  selectConvertedAmount,\n  selectConverterDataFreshness,\n} from '../../store/slices/converterSlice';\nimport { DataSourceIndicator } from '../../components/DataSourceIndicator';\nimport { CurrencyButton } from '../../components/CurrencyButton';\nimport { CurrencyModal } from '../../components/CurrencyModal';\n\nimport { useAppDispatch, useAppSelector } from '@/store/hook';\n\nexport default function ConverterScreen() {\n  const dispatch = useAppDispatch();\n  const colorScheme = useColorScheme();\n  const isDark = colorScheme === 'dark';\n\n  // Селекторы\n  const rates = useAppSelector(selectConverterRates);\n  const availableCurrencies = useAppSelector(selectConverterCurrencies);\n  const isLoading = useAppSelector(selectConverterLoading);\n  const error = useAppSelector(selectConverterError);\n  const lastUpdated = useAppSelector(selectConverterLastUpdated);\n  const fromCurrency = useAppSelector(selectFromCurrency);\n  const toCurrency = useAppSelector(selectToCurrency);\n  const amount = useAppSelector(selectAmount);\n  const convertedAmount = useAppSelector(selectConvertedAmount);\n  const dataFreshness = useAppSelector(selectConverterDataFreshness);\n  const { isOffline } = useAppSelector(state => state.app);\n\n  // Локальное состояние\n  const [refreshing, setRefreshing] = useState(false);\n  const [fromCurrencyModalVisible, setFromCurrencyModalVisible] = useState(false);\n  const [toCurrencyModalVisible, setToCurrencyModalVisible] = useState(false);\n\n  // Вычисляемые значения\n  const dataSourceInfo = useMemo(() => {\n    if (!rates || rates.length === 0) {\n      return null;\n    }\n    return { isOffline, lastUpdated, freshness: dataFreshness };\n  }, [rates, isOffline, lastUpdated, dataFreshness]);\n\n  const formattedResult = useMemo(() => {\n    if (!convertedAmount) {\n      return '';\n    }\n    const num = Number(convertedAmount);\n    return isNaN(num) ? '' : num.toLocaleString(undefined, { maximumFractionDigits: 4 });\n  }, [convertedAmount]);\n\n  const exchangeRateString = useMemo(() => {\n    if (!rates || rates.length === 0 || fromCurrency === toCurrency) {\n      return fromCurrency === toCurrency ? '1 : 1' : '';\n    }\n\n    const getRateToUAH = (cc: string) => {\n      if (cc === 'UAH') {\n        return 1;\n      }\n      const found = rates.find(r => r.cc === cc);\n      return found ? found.rate : null;\n    };\n\n    const fromRate = getRateToUAH(fromCurrency);\n    const toRate = getRateToUAH(toCurrency);\n\n    if (!fromRate || !toRate) {\n      return '';\n    }\n\n    const rate = fromRate / toRate;\n    return `1 ${fromCurrency} = ${rate.toFixed(4)} ${toCurrency}`;\n  }, [rates, fromCurrency, toCurrency]);\n\n  // Эффекты\n  useEffect(() => {\n    dispatch(fetchConverterRates());\n  }, [dispatch]);\n\n  // Обработчики\n  const handleRefresh = () => {\n    setRefreshing(true);\n    dispatch(fetchConverterRates()).finally(() => setRefreshing(false));\n  };\n\n  const handleAmountChange = (text: string) => {\n    const cleanText = text.replace(/[^0-9.]/g, '');\n    const parts = cleanText.split('.');\n    if (parts.length > 2) {\n      return;\n    }\n    dispatch(setAmount(cleanText));\n  };\n\n  const handleSwapCurrencies = () => {\n    dispatch(swapCurrencies());\n  };\n\n  const getCurrencyInfo = code => {\n    return availableCurrencies.find(c => c.code === code) || { code, name: code, rate: 0 };\n  };\n\n  const handleFromCurrencySelect = currencyCode => {\n    dispatch(setFromCurrency(currencyCode));\n    setFromCurrencyModalVisible(false);\n  };\n\n  const handleToCurrencySelect = currencyCode => {\n    dispatch(setToCurrency(currencyCode));\n    setToCurrencyModalVisible(false);\n  };\n\n  // Рендер состояний загрузки и ошибок\n  if (isLoading && !refreshing) {\n    return (\n      <View style={[styles.mainContainer, { backgroundColor: isDark ? '#121212' : '#f8f9fa' }]}>\n        <View style={styles.loaderContainer}>\n          <ActivityIndicator size=\"large\" color={isDark ? '#ffffff' : '#000000'} />\n          <Text style={[styles.loadingText, { color: isDark ? '#ffffff' : '#000000' }]}>\n            Loading exchange rates...\n          </Text>\n        </View>\n      </View>\n    );\n  }\n\n  if (error && rates.length === 0) {\n    return (\n      <View style={[styles.mainContainer, { backgroundColor: isDark ? '#121212' : '#f8f9fa' }]}>\n        <View style={styles.errorContainer}>\n          <Text style={[styles.errorText, { color: isDark ? '#ff6b6b' : '#dc3545' }]}>{error}</Text>\n          <TouchableOpacity\n            style={[styles.retryButton, { backgroundColor: isDark ? '#444444' : '#eeeeee' }]}\n            onPress={() => dispatch(fetchConverterRates())}\n          >\n            <Text style={{ color: isDark ? '#ffffff' : '#000000' }}>Retry</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    );\n  }\n\n  // Основной рендер\n  return (\n    <View style={[styles.mainContainer, { backgroundColor: isDark ? '#121212' : '#f8f9fa' }]}>\n      <ScrollView\n        style={styles.container}\n        refreshControl={<RefreshControl refreshing={refreshing} onRefresh={handleRefresh} />}\n      >\n        <DataSourceIndicator\n          dataSourceInfo={dataSourceInfo}\n          isLoading={isLoading}\n          onRefresh={handleRefresh}\n          refreshing={refreshing}\n          isDark={isDark}\n        />\n\n        <View\n          style={[styles.converterContainer, { backgroundColor: isDark ? '#2c2c2e' : '#ffffff' }]}\n        >\n          {/* From Currency Section */}\n          <View style={styles.currencySection}>\n            <Text style={[styles.sectionLabel, { color: isDark ? '#ffffff' : '#000000' }]}>\n              From\n            </Text>\n            <CurrencyButton\n              currency={fromCurrency}\n              currencyInfo={getCurrencyInfo(fromCurrency)}\n              onPress={() => setFromCurrencyModalVisible(true)}\n              isDark={isDark}\n            />\n            <TextInput\n              style={[\n                styles.amountInput,\n                {\n                  backgroundColor: isDark ? '#1c1c1e' : '#ffffff',\n                  color: isDark ? '#ffffff' : '#000000',\n                  borderColor: isDark ? '#444444' : '#dddddd',\n                },\n              ]}\n              value={amount}\n              onChangeText={handleAmountChange}\n              placeholder=\"Enter amount\"\n              placeholderTextColor={isDark ? '#666666' : '#999999'}\n              keyboardType=\"numeric\"\n              textAlign=\"center\"\n            />\n          </View>\n\n          {/* Swap Button */}\n          <TouchableOpacity\n            style={[styles.swapButton, { backgroundColor: '#007AFF' }]}\n            onPress={handleSwapCurrencies}\n          >\n            <MaterialCommunityIcons name=\"swap-vertical\" size={24} color=\"#ffffff\" />\n          </TouchableOpacity>\n\n          {/* To Currency Section */}\n          <View style={styles.currencySection}>\n            <Text style={[styles.sectionLabel, { color: isDark ? '#ffffff' : '#000000' }]}>To</Text>\n            <CurrencyButton\n              currency={toCurrency}\n              currencyInfo={getCurrencyInfo(toCurrency)}\n              onPress={() => setToCurrencyModalVisible(true)}\n              isDark={isDark}\n            />\n            <View\n              style={[\n                styles.resultContainer,\n                {\n                  backgroundColor: isDark ? '#1c1c1e' : '#ffffff',\n                  borderColor: isDark ? '#444444' : '#dddddd',\n                },\n              ]}\n            >\n              <Text style={[styles.resultAmount, { color: isDark ? '#4cd964' : '#28a745' }]}>\n                {formattedResult}\n              </Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Exchange Rate Info */}\n        {exchangeRateString && (\n          <View\n            style={[styles.rateInfoContainer, { backgroundColor: isDark ? '#2c2c2e' : '#ffffff' }]}\n          >\n            <MaterialCommunityIcons\n              name=\"information-outline\"\n              size={20}\n              color={isDark ? '#a9a9a9' : '#666666'}\n            />\n            <Text style={[styles.rateInfoText, { color: isDark ? '#a9a9a9' : '#666666' }]}>\n              {exchangeRateString}\n            </Text>\n          </View>\n        )}\n\n        {/* Last Updated */}\n        {lastUpdated && (\n          <Text style={[styles.updatedText, { color: isDark ? '#aaaaaa' : '#666666' }]}>\n            Last updated: {new Date(lastUpdated).toLocaleString()}\n            {isOffline ? ' (offline data)' : ''}\n          </Text>\n        )}\n\n        <View style={styles.footer} />\n      </ScrollView>\n\n      {/* Modals */}\n      <CurrencyModal\n        visible={fromCurrencyModalVisible}\n        onClose={() => setFromCurrencyModalVisible(false)}\n        title=\"Select Source Currency\"\n        currencies={availableCurrencies}\n        selectedCurrency={fromCurrency}\n        onSelect={handleFromCurrencySelect}\n        isDark={isDark}\n      />\n\n      <CurrencyModal\n        visible={toCurrencyModalVisible}\n        onClose={() => setToCurrencyModalVisible(false)}\n        title=\"Select Target Currency\"\n        currencies={availableCurrencies}\n        selectedCurrency={toCurrency}\n        onSelect={handleToCurrencySelect}\n        isDark={isDark}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  mainContainer: { flex: 1, width: '100%' },\n  container: { flex: 1 },\n  loaderContainer: { marginTop: 100, alignItems: 'center' },\n  loadingText: { marginTop: 16, fontSize: 16 },\n  errorContainer: { margin: 16, padding: 16, borderRadius: 8, alignItems: 'center' },\n  errorText: { textAlign: 'center', marginBottom: 16 },\n  retryButton: { padding: 10, borderRadius: 5 },\n  converterContainer: {\n    margin: 16,\n    padding: 20,\n    borderRadius: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 2,\n  },\n  currencySection: { marginBottom: 16 },\n  sectionLabel: {\n    fontSize: 14,\n    fontWeight: '600',\n    marginBottom: 8,\n    textTransform: 'uppercase',\n    letterSpacing: 1,\n  },\n  amountInput: {\n    borderWidth: 1,\n    borderRadius: 12,\n    padding: 16,\n    fontSize: 24,\n    fontWeight: 'bold',\n  },\n  swapButton: {\n    alignSelf: 'center',\n    width: 48,\n    height: 48,\n    borderRadius: 24,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginVertical: 16,\n  },\n  resultContainer: {\n    borderWidth: 1,\n    borderRadius: 12,\n    padding: 16,\n    alignItems: 'center',\n  },\n  resultAmount: { fontSize: 28, fontWeight: 'bold' },\n  rateInfoContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    margin: 16,\n    padding: 16,\n    borderRadius: 12,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.05,\n    shadowRadius: 2,\n    elevation: 1,\n  },\n  rateInfoText: { marginLeft: 8, fontSize: 14, fontStyle: 'italic' },\n  updatedText: { fontSize: 12, textAlign: 'center', marginTop: 16, marginBottom: 8 },\n  footer: { height: 40 },\n});\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/app/(tabs)/forecast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/app/(tabs)/history.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'HistoryScreen' has too many lines (162). Maximum allowed is 150.","line":50,"column":16,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":211,"endColumn":2},{"ruleId":"complexity","severity":2,"message":"Function 'HistoryScreen' has a complexity of 16. Maximum allowed is 15.","line":50,"column":16,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":211,"endColumn":2}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ActivityIndicator,\n  ScrollView,\n  RefreshControl,\n  TouchableOpacity,\n} from 'react-native';\n\nimport { Currency } from '../../services/api';\nimport { DEFAULT_CURRENCIES } from '../../constants/config';\nimport { useColorScheme } from '../../hooks/useColorScheme';\nimport { fetchHistoricalRates } from '../../store/slices/historySlice';\nimport { DataSourceIndicator } from '../../components/DataSourceIndicator';\nimport { HistoryFilterPanel } from '../../components/HistoryFilterPanel';\nimport { CurrencyModal, PeriodModal } from '../../components/HistoryModals';\nimport { ChartSection } from '../../components/ChartSection';\n\nimport { useAppDispatch, useAppSelector } from '@/store/hook';\n\nconst PERIODS = {\n  WEEK: 'week',\n  MONTH: 'month',\n  QUARTER: 'quarter',\n  YEAR: 'year',\n};\n\nconst AVAILABLE_CURRENCIES: Currency[] = [\n  { code: 'USD', name: 'US Dollar', symbol: '$' },\n  { code: 'EUR', name: 'Euro', symbol: '€' },\n  { code: 'GBP', name: 'British Pound', symbol: '£' },\n  { code: 'JPY', name: 'Japanese Yen', symbol: '¥' },\n  { code: 'CHF', name: 'Swiss Franc', symbol: 'Fr' },\n  { code: 'CAD', name: 'Canadian Dollar', symbol: 'C$' },\n  { code: 'AUD', name: 'Australian Dollar', symbol: 'A$' },\n  { code: 'NZD', name: 'New Zealand Dollar', symbol: 'NZ$' },\n  { code: 'CNY', name: 'Chinese Yuan', symbol: '¥' },\n  { code: 'PLN', name: 'Polish Złoty', symbol: 'zł' },\n];\n\nconst PERIOD_OPTIONS = [\n  { label: 'Weekly', value: PERIODS.WEEK },\n  { label: 'Monthly', value: PERIODS.MONTH },\n  { label: 'Quarterly', value: PERIODS.QUARTER },\n  { label: 'Yearly', value: PERIODS.YEAR },\n];\n\nexport default function HistoryScreen() {\n  const dispatch = useAppDispatch();\n  const colorScheme = useColorScheme();\n  const isDark = colorScheme === 'dark';\n\n  // Redux state\n  const { historicalData, isLoading, error, lastUpdated } = useAppSelector(state => state.history);\n  const { isOffline } = useAppSelector(state => state.app);\n\n  // Local state\n  const [refreshing, setRefreshing] = useState(false);\n  const [selectedCurrency, setSelectedCurrency] = useState(AVAILABLE_CURRENCIES[0]?.code);\n  const [selectedPeriod, setSelectedPeriod] = useState(PERIODS.MONTH);\n  const [currencyModalVisible, setCurrencyModalVisible] = useState(false);\n  const [periodModalVisible, setPeriodModalVisible] = useState(false);\n\n  // Computed values\n  const dataSourceInfo = useMemo(() => {\n    if (!(historicalData?.length > 0)) {\n      return null;\n    }\n    return { isOffline, lastUpdated };\n  }, [historicalData, isOffline, lastUpdated]);\n\n  const availableCurrencies = useMemo(\n    () => AVAILABLE_CURRENCIES.filter(c => c.code !== DEFAULT_CURRENCIES.BASE),\n    []\n  );\n\n  // Effects\n  useEffect(() => {\n    dispatch(\n      fetchHistoricalRates({\n        currency: selectedCurrency.toLowerCase(),\n        period: selectedPeriod,\n      })\n    );\n  }, [dispatch, selectedCurrency, selectedPeriod]);\n\n  // Handlers\n  const handleRefresh = () => {\n    setRefreshing(true);\n    dispatch(\n      fetchHistoricalRates({\n        currency: selectedCurrency.toLowerCase(),\n        period: selectedPeriod,\n      })\n    ).finally(() => setRefreshing(false));\n  };\n\n  const handleCurrencySelect = (currencyCode: string) => {\n    setSelectedCurrency(currencyCode);\n    setCurrencyModalVisible(false);\n  };\n\n  const handlePeriodSelect = (period: string) => {\n    setSelectedPeriod(period);\n    setPeriodModalVisible(false);\n  };\n\n  const getPeriodName = (periodCode: string) => {\n    const period = PERIOD_OPTIONS.find(p => p.value === periodCode);\n    return period?.label || periodCode;\n  };\n\n  // Loading state\n  if (isLoading && !refreshing) {\n    return (\n      <View style={[styles.container, { backgroundColor: isDark ? '#121212' : '#f8f9fa' }]}>\n        <ActivityIndicator\n          size=\"large\"\n          color={isDark ? '#ffffff' : '#000000'}\n          style={styles.loader}\n        />\n      </View>\n    );\n  }\n\n  // Error state (only if no data)\n  if (error && !historicalData) {\n    return (\n      <View style={[styles.container, { backgroundColor: isDark ? '#121212' : '#f8f9fa' }]}>\n        <View style={styles.errorContainer}>\n          <Text style={[styles.errorText, { color: isDark ? '#ff6b6b' : '#dc3545' }]}>{error}</Text>\n          <TouchableOpacity\n            style={[styles.retryButton, { backgroundColor: isDark ? '#444444' : '#eeeeee' }]}\n            onPress={() =>\n              dispatch(\n                fetchHistoricalRates({\n                  currency: selectedCurrency.toLowerCase(),\n                  period: selectedPeriod,\n                })\n              )\n            }\n          >\n            <Text style={{ color: isDark ? '#ffffff' : '#000000' }}>Retry</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    );\n  }\n\n  // Main render\n  return (\n    <>\n      <ScrollView\n        style={[styles.container, { backgroundColor: isDark ? '#121212' : '#f8f9fa' }]}\n        refreshControl={<RefreshControl refreshing={refreshing} onRefresh={handleRefresh} />}\n      >\n        <DataSourceIndicator\n          dataSourceInfo={dataSourceInfo}\n          isLoading={isLoading}\n          onRefresh={handleRefresh}\n          refreshing={refreshing}\n          isDark={isDark}\n        />\n\n        <HistoryFilterPanel\n          selectedCurrency={selectedCurrency}\n          selectedPeriod={getPeriodName(selectedPeriod)}\n          onCurrencyPress={() => setCurrencyModalVisible(true)}\n          onPeriodPress={() => setPeriodModalVisible(true)}\n          isDark={isDark}\n        />\n\n        <ChartSection\n          historicalData={historicalData}\n          selectedCurrency={selectedCurrency}\n          baseCurrency={DEFAULT_CURRENCIES.BASE}\n          isDark={isDark}\n        />\n\n        {lastUpdated && (\n          <Text style={[styles.updatedText, { color: isDark ? '#aaaaaa' : '#666666' }]}>\n            Last updated: {new Date(lastUpdated).toLocaleString()}\n            {isOffline ? ' (offline data)' : ''}\n          </Text>\n        )}\n\n        <View style={styles.footer} />\n      </ScrollView>\n\n      <CurrencyModal\n        visible={currencyModalVisible}\n        onClose={() => setCurrencyModalVisible(false)}\n        currencies={availableCurrencies}\n        selectedCurrency={selectedCurrency}\n        onSelect={handleCurrencySelect}\n        isDark={isDark}\n      />\n\n      <PeriodModal\n        visible={periodModalVisible}\n        onClose={() => setPeriodModalVisible(false)}\n        periods={PERIOD_OPTIONS}\n        selectedPeriod={selectedPeriod}\n        onSelect={handlePeriodSelect}\n        isDark={isDark}\n      />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  loader: {\n    marginTop: 100,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  errorContainer: {\n    margin: 16,\n    padding: 16,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  errorText: {\n    textAlign: 'center',\n    marginBottom: 16,\n  },\n  retryButton: {\n    padding: 10,\n    borderRadius: 5,\n  },\n  updatedText: {\n    fontSize: 12,\n    textAlign: 'center',\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  footer: {\n    height: 40,\n  },\n});\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/app/(tabs)/index.tsx","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·CurrencySelectionModal,·BankSelectionModal·` with `⏎··CurrencySelectionModal,⏎··BankSelectionModal,⏎`","line":18,"column":9,"nodeType":null,"messageId":"replace","endLine":18,"endColumn":53,"fix":{"range":[581,625],"text":"\n  CurrencySelectionModal,\n  BankSelectionModal,\n"}},{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'HomeScreen' has too many lines (237). Maximum allowed is 150.","line":23,"column":16,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":259,"endColumn":2},{"ruleId":"complexity","severity":2,"message":"Function 'HomeScreen' has a complexity of 19. Maximum allowed is 15.","line":23,"column":16,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":259,"endColumn":2}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// app/(tabs)/index.tsx - Рефакторированный HomeScreen\nimport React, { useState, useEffect, useMemo } from 'react';\nimport {\n  View,\n  Text,\n  ScrollView,\n  StyleSheet,\n  ActivityIndicator,\n  RefreshControl,\n  TouchableOpacity,\n} from 'react-native';\n\nimport { DEFAULT_CURRENCIES } from '../../constants/config';\nimport { useColorScheme } from '../../hooks/useColorScheme';\nimport { fetchRates } from '../../store/slices/currencySlice';\nimport { DataSourceIndicator } from '../../components/DataSourceIndicator';\nimport { FilterPanel } from '../../components/FilterPanel';\nimport { CurrencySelectionModal, BankSelectionModal } from '../../components/CurrencySelectionModal';\nimport { RatesSection } from '../../components/RatesSection';\n\nimport { useAppDispatch, useAppSelector } from '@/store/hook';\n\nexport default function HomeScreen() {\n  const dispatch = useAppDispatch();\n  const colorScheme = useColorScheme();\n  const isDark = colorScheme === 'dark';\n\n  // Redux state\n  const { rates, isLoading, error, lastUpdated } = useAppSelector(state => state.currency);\n  const { isOffline } = useAppSelector(state => state.app);\n\n  // Local state\n  const [refreshing, setRefreshing] = useState(false);\n  const [currencyModalVisible, setCurrencyModalVisible] = useState(false);\n  const [bankModalVisible, setBankModalVisible] = useState(false);\n  const [selectedCurrencies, setSelectedCurrencies] = useState<string[]>(\n    DEFAULT_CURRENCIES.SELECTED\n  );\n  const [selectedBanks, setSelectedBanks] = useState<string[]>([]);\n  const [availableBanks, setAvailableBanks] = useState<string[]>([]);\n  const [availableCurrencies, setAvailableCurrencies] = useState<string[]>(\n    DEFAULT_CURRENCIES.SELECTED\n  );\n\n  // Computed values\n  const dataSourceInfo = useMemo(() => {\n    if (!rates) {\n      return null;\n    }\n    return { isOffline, lastUpdated };\n  }, [rates, isOffline, lastUpdated]);\n\n  const filteredData = useMemo(() => {\n    if (!rates) {\n      return { nbu: [], banks: [], black: [] };\n    }\n\n    return {\n      nbu: rates.nbu?.filter(rate => selectedCurrencies.includes(rate.currency)) || [],\n      banks:\n        rates.banks?.filter(\n          rate => selectedCurrencies.includes(rate.currency) && selectedBanks.includes(rate.source)\n        ) || [],\n      black: rates.black?.filter(rate => selectedCurrencies.includes(rate.currency)) || [],\n    };\n  }, [rates, selectedCurrencies, selectedBanks]);\n\n  const hasFilteredData =\n    filteredData.nbu.length > 0 || filteredData.banks.length > 0 || filteredData.black.length > 0;\n\n  // Effects\n  useEffect(() => {\n    dispatch(fetchRates(selectedCurrencies));\n  }, [dispatch, selectedCurrencies]);\n\n  useEffect(() => {\n    if (rates) {\n      updateAvailableOptions();\n    }\n  }, [rates]);\n\n  // Handlers\n  const handleRefresh = () => {\n    setRefreshing(true);\n    dispatch(fetchRates(selectedCurrencies)).finally(() => setRefreshing(false));\n  };\n\n  const updateAvailableOptions = () => {\n    if (!rates) {\n      return;\n    }\n\n    // Extract currencies\n    const currencies: string[] = [];\n    ['nbu', 'banks', 'black'].forEach(sourceType => {\n      if (rates[sourceType]) {\n        rates[sourceType].forEach(rate => {\n          if (rate.currency && !currencies.includes(rate.currency)) {\n            currencies.push(rate.currency);\n          }\n        });\n      }\n    });\n\n    if (currencies.length > 0) {\n      setAvailableCurrencies(currencies);\n    }\n\n    // Extract banks\n    const banks: string[] = [];\n    if (rates.banks) {\n      rates.banks.forEach(rate => {\n        if (rate.source && !banks.includes(rate.source)) {\n          banks.push(rate.source);\n        }\n      });\n\n      setAvailableBanks(banks);\n\n      if (selectedBanks.length === 0 && banks.length > 0) {\n        setSelectedBanks(banks);\n      }\n    }\n  };\n\n  const toggleCurrencySelection = (currency: string) => {\n    if (selectedCurrencies.includes(currency)) {\n      if (selectedCurrencies.length > 1) {\n        setSelectedCurrencies(selectedCurrencies.filter(c => c !== currency));\n      }\n    } else {\n      setSelectedCurrencies([...selectedCurrencies, currency]);\n    }\n  };\n\n  const toggleBankSelection = (bank: string) => {\n    if (selectedBanks.includes(bank)) {\n      if (selectedBanks.length > 1) {\n        setSelectedBanks(selectedBanks.filter(b => b !== bank));\n      }\n    } else {\n      setSelectedBanks([...selectedBanks, bank]);\n    }\n  };\n\n  // Loading state\n  if (isLoading && !refreshing) {\n    return (\n      <View style={[styles.container, { backgroundColor: isDark ? '#121212' : '#f8f9fa' }]}>\n        <ActivityIndicator\n          size=\"large\"\n          color={isDark ? '#ffffff' : '#000000'}\n          style={styles.loader}\n        />\n      </View>\n    );\n  }\n\n  // Error state (only if no data)\n  if (error && !rates) {\n    return (\n      <View style={[styles.container, { backgroundColor: isDark ? '#121212' : '#f8f9fa' }]}>\n        <View style={styles.errorContainer}>\n          <Text style={[styles.errorText, { color: isDark ? '#ff6b6b' : '#dc3545' }]}>{error}</Text>\n          <TouchableOpacity\n            style={[styles.retryButton, { backgroundColor: isDark ? '#444444' : '#eeeeee' }]}\n            onPress={() => dispatch(fetchRates(selectedCurrencies))}\n          >\n            <Text style={{ color: isDark ? '#ffffff' : '#000000' }}>Retry</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    );\n  }\n\n  // Main render\n  return (\n    <>\n      <ScrollView\n        style={[styles.container, { backgroundColor: isDark ? '#121212' : '#f8f9fa' }]}\n        refreshControl={<RefreshControl refreshing={refreshing} onRefresh={handleRefresh} />}\n      >\n        <DataSourceIndicator\n          dataSourceInfo={dataSourceInfo}\n          isLoading={isLoading}\n          onRefresh={handleRefresh}\n          refreshing={refreshing}\n          isDark={isDark}\n        />\n\n        <FilterPanel\n          selectedCurrencies={selectedCurrencies}\n          selectedBanks={selectedBanks}\n          onCurrencyPress={() => setCurrencyModalVisible(true)}\n          onBankPress={() => setBankModalVisible(true)}\n          isDark={isDark}\n        />\n\n        {!hasFilteredData ? (\n          <View style={styles.emptyContainer}>\n            <Text style={[styles.emptyText, { color: isDark ? '#ffffff' : '#000000' }]}>\n              Нет данных по выбранным фильтрам\n            </Text>\n          </View>\n        ) : (\n          <>\n            <RatesSection\n              title=\"Official (NBU) Rates\"\n              rates={filteredData.nbu}\n              keyPrefix=\"nbu\"\n              isDark={isDark}\n            />\n\n            <RatesSection\n              title=\"Commercial Banks\"\n              rates={filteredData.banks}\n              keyPrefix=\"bank\"\n              isDark={isDark}\n            />\n\n            <RatesSection\n              title=\"Black Market\"\n              rates={filteredData.black}\n              keyPrefix=\"black\"\n              isDark={isDark}\n            />\n          </>\n        )}\n\n        {lastUpdated && (\n          <Text style={[styles.updatedText, { color: isDark ? '#aaaaaa' : '#666666' }]}>\n            Last updated: {new Date(lastUpdated).toLocaleString()}\n            {isOffline ? ' (offline data)' : ''}\n          </Text>\n        )}\n\n        <View style={styles.footer} />\n      </ScrollView>\n\n      <CurrencySelectionModal\n        visible={currencyModalVisible}\n        onClose={() => setCurrencyModalVisible(false)}\n        currencies={availableCurrencies}\n        selectedCurrencies={selectedCurrencies}\n        onToggle={toggleCurrencySelection}\n        isDark={isDark}\n      />\n\n      <BankSelectionModal\n        visible={bankModalVisible}\n        onClose={() => setBankModalVisible(false)}\n        banks={availableBanks}\n        selectedBanks={selectedBanks}\n        onToggle={toggleBankSelection}\n        isDark={isDark}\n      />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  loader: {\n    marginTop: 100,\n  },\n  errorContainer: {\n    margin: 16,\n    padding: 16,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  errorText: {\n    textAlign: 'center',\n    marginBottom: 16,\n  },\n  retryButton: {\n    padding: 10,\n    borderRadius: 5,\n  },\n  emptyContainer: {\n    margin: 16,\n    padding: 16,\n    alignItems: 'center',\n  },\n  emptyText: {\n    textAlign: 'center',\n  },\n  updatedText: {\n    fontSize: 12,\n    textAlign: 'center',\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  footer: {\n    height: 40,\n  },\n});\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/app/(tabs)/settings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/app/+html.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/app/_layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/app/auth/login.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/app/auth/register.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/app/modal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/app/types/AlertTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/app/types/ForecastTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/AlertCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/AlertsList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/AlertsStatsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/AppSettingsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/AuthRequiredState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/ChartSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[188,191],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[188,191],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nimport { CurrencyLineChart } from '../components/charts/LineChart';\n\ninterface Props {\n  historicalData: any[];\n  selectedCurrency: string;\n  baseCurrency: string;\n  isDark: boolean;\n}\n\nexport const ChartSection: React.FC<Props> = ({\n  historicalData,\n  selectedCurrency,\n  baseCurrency,\n  isDark,\n}) => {\n  if (!historicalData?.length) {\n    return (\n      <Text style={[styles.noDataText, { color: isDark ? '#ffffff' : '#000000' }]}>\n        No historical data available for the selected parameters.\n      </Text>\n    );\n  }\n\n  return (\n    <View style={[styles.chartWrapper, { backgroundColor: isDark ? '#2c2c2e' : '#ffffff' }]}>\n      <CurrencyLineChart\n        data={{ data: historicalData }}\n        title={`${selectedCurrency} to ${baseCurrency} Exchange Rate`}\n        currency={selectedCurrency}\n        baseCurrency={baseCurrency}\n        showSellRate={true}\n      />\n    </View>\n  );\n};\n\nconst chartStyles = StyleSheet.create({\n  chartWrapper: {\n    marginHorizontal: 16,\n    marginBottom: 16,\n    borderRadius: 12,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 2,\n    padding: 12,\n    overflow: 'hidden',\n  },\n  noDataText: {\n    fontSize: 16,\n    textAlign: 'center',\n    marginTop: 100,\n  },\n});\n\nconst styles = chartStyles;\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/CreateAlertButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/CreateAlertModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":201,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5512,5515],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5512,5515],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":216,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6005,6008],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6005,6008],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// app/(tabs)/components/CreateAlertModal.tsx\nimport React, { useState, useEffect } from 'react';\nimport {\n  Modal,\n  View,\n  Text,\n  ScrollView,\n  TouchableOpacity,\n  TextInput,\n  StyleSheet,\n  Platform,\n} from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { Picker } from '@react-native-picker/picker';\n\nimport { CURRENCY_PAIRS } from '../constants/config';\nimport { api } from '../services/api';\nimport { NewAlertForm } from '../app/types/AlertTypes';\n\ninterface Props {\n  visible: boolean;\n  onClose: () => void;\n  onCreateAlert: (alertData: NewAlertForm) => void;\n}\n\nconst getCurrencyPairInfo = (code: string) => {\n  return (\n    CURRENCY_PAIRS.find(pair => pair.code === code) || {\n      code,\n      label: code,\n      flag: '💱',\n      name: 'Unknown Currency',\n    }\n  );\n};\n\nexport const CreateAlertModal: React.FC<Props> = ({ visible, onClose, onCreateAlert }) => {\n  const [formData, setFormData] = useState<NewAlertForm>({\n    currencyPair: 'USDUAH',\n    alertType: 'above',\n    targetPrice: '',\n    currentPrice: 0,\n  });\n\n  useEffect(() => {\n    if (visible) {\n      loadCurrentPrice();\n    }\n  }, [visible, formData.currencyPair]);\n\n  const loadCurrentPrice = async () => {\n    try {\n      const rates = await api.getCurrentRatesForAlerts();\n      setFormData(prev => ({\n        ...prev,\n        currentPrice: rates[prev.currencyPair]?.market || 0,\n      }));\n    } catch (error) {\n      console.error('Error loading current price:', error);\n    }\n  };\n\n  const handleSubmit = () => {\n    onCreateAlert(formData);\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setFormData({\n      currencyPair: 'USDUAH',\n      alertType: 'above',\n      targetPrice: '',\n      currentPrice: 0,\n    });\n  };\n\n  const handleClose = () => {\n    resetForm();\n    onClose();\n  };\n\n  return (\n    <Modal visible={visible} animationType=\"slide\" presentationStyle=\"pageSheet\">\n      <SafeAreaView style={styles.container}>\n        <ModalHeader onCancel={handleClose} onSave={handleSubmit} />\n\n        <ScrollView style={styles.content}>\n          <CurrencyPairSelector\n            selectedValue={formData.currencyPair}\n            onValueChange={value => {\n              setFormData({ ...formData, currencyPair: value });\n            }}\n          />\n\n          <AlertTypeSelector\n            selectedType={formData.alertType}\n            onTypeChange={type => setFormData({ ...formData, alertType: type })}\n          />\n\n          <PriceInput\n            value={formData.targetPrice}\n            onChangeText={text => setFormData({ ...formData, targetPrice: text })}\n          />\n\n          <CurrentPriceInfo\n            currencyInfo={getCurrencyPairInfo(formData.currencyPair)}\n            currentPrice={formData.currentPrice}\n          />\n\n          <NotificationPreview\n            currencyInfo={getCurrencyPairInfo(formData.currencyPair)}\n            targetPrice={formData.targetPrice}\n          />\n        </ScrollView>\n      </SafeAreaView>\n    </Modal>\n  );\n};\n\nconst ModalHeader: React.FC<{\n  onCancel: () => void;\n  onSave: () => void;\n}> = ({ onCancel, onSave }) => (\n  <View style={styles.header}>\n    <TouchableOpacity onPress={onCancel}>\n      <Text style={styles.cancelButton}>Cancel</Text>\n    </TouchableOpacity>\n    <Text style={styles.title}>New Alert</Text>\n    <TouchableOpacity onPress={onSave}>\n      <Text style={styles.saveButton}>Create</Text>\n    </TouchableOpacity>\n  </View>\n);\n\nconst CurrencyPairSelector: React.FC<{\n  selectedValue: string;\n  onValueChange: (value: string) => void;\n}> = ({ selectedValue, onValueChange }) => (\n  <View style={styles.formGroup}>\n    <Text style={styles.formLabel}>Currency Pair</Text>\n    <View style={styles.pickerContainer}>\n      <Picker selectedValue={selectedValue} onValueChange={onValueChange} style={styles.picker}>\n        {CURRENCY_PAIRS.map(pair => (\n          <Picker.Item key={pair.code} label={pair.label} value={pair.code} />\n        ))}\n      </Picker>\n    </View>\n  </View>\n);\n\nconst AlertTypeSelector: React.FC<{\n  selectedType: 'above' | 'below';\n  onTypeChange: (type: 'above' | 'below') => void;\n}> = ({ selectedType, onTypeChange }) => (\n  <View style={styles.formGroup}>\n    <Text style={styles.formLabel}>Condition</Text>\n    <View style={styles.alertTypeContainer}>\n      <TouchableOpacity\n        style={[styles.alertTypeButton, selectedType === 'above' && styles.alertTypeButtonActive]}\n        onPress={() => onTypeChange('above')}\n      >\n        <Text\n          style={[styles.alertTypeText, selectedType === 'above' && styles.alertTypeTextActive]}\n        >\n          ↗ Higher\n        </Text>\n      </TouchableOpacity>\n\n      <TouchableOpacity\n        style={[styles.alertTypeButton, selectedType === 'below' && styles.alertTypeButtonActive]}\n        onPress={() => onTypeChange('below')}\n      >\n        <Text\n          style={[styles.alertTypeText, selectedType === 'below' && styles.alertTypeTextActive]}\n        >\n          ↘ Lower\n        </Text>\n      </TouchableOpacity>\n    </View>\n  </View>\n);\n\nconst PriceInput: React.FC<{\n  value: string;\n  onChangeText: (text: string) => void;\n}> = ({ value, onChangeText }) => (\n  <View style={styles.formGroup}>\n    <Text style={styles.formLabel}>Target Price (₴)</Text>\n    <TextInput\n      style={styles.priceInput}\n      value={value}\n      onChangeText={onChangeText}\n      placeholder=\"For example: 42.50\"\n      keyboardType=\"decimal-pad\"\n      autoFocus\n    />\n  </View>\n);\n\nconst CurrentPriceInfo: React.FC<{\n  currencyInfo: any;\n  currentPrice: number;\n}> = ({ currencyInfo, currentPrice }) => (\n  <View style={styles.currentPriceInfo}>\n    <Text style={styles.currentPriceLabel}>Current Rate {currencyInfo.name}:</Text>\n    <Text style={styles.currentPriceValue}>\n      {currentPrice ? `${currentPrice.toFixed(2)}₴` : 'Loading...'}\n    </Text>\n    <Text style={styles.currentPriceSubtext}>\n      {currencyInfo.flag} {currencyInfo.code}\n    </Text>\n  </View>\n);\n\nconst NotificationPreview: React.FC<{\n  currencyInfo: any;\n  targetPrice: string;\n}> = ({ currencyInfo, targetPrice }) => (\n  <View style={styles.notificationPreview}>\n    <Text style={styles.previewTitle}>Example Notification:</Text>\n    <View style={styles.notificationCard}>\n      <Text style={styles.notificationTitle}>💰 Currency Rate Alert!</Text>\n      <Text style={styles.notificationBody}>\n        {currencyInfo.name}: {targetPrice || 'XX.XX'}₴{'\\n'}Target: {targetPrice || 'XX.XX'}₴\n      </Text>\n    </View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F8F9FA',\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 16,\n    backgroundColor: '#FFFFFF',\n    borderBottomWidth: 1,\n    borderBottomColor: '#E8E8E8',\n  },\n  cancelButton: {\n    fontSize: 16,\n    color: '#E74C3C',\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#2C3E50',\n  },\n  saveButton: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#16A085',\n  },\n  content: {\n    flex: 1,\n    padding: 20,\n  },\n  formGroup: {\n    marginBottom: 24,\n  },\n  formLabel: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#2C3E50',\n    marginBottom: 8,\n  },\n  pickerContainer: {\n    backgroundColor: '#FFFFFF',\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#E8E8E8',\n  },\n  picker: {\n    height: Platform.OS === 'ios' ? 200 : 50,\n  },\n  alertTypeContainer: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  alertTypeButton: {\n    flex: 1,\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#E8E8E8',\n    backgroundColor: '#FFFFFF',\n    alignItems: 'center',\n  },\n  alertTypeButtonActive: {\n    borderColor: '#16A085',\n    backgroundColor: '#16A085',\n  },\n  alertTypeText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#7F8C8D',\n  },\n  alertTypeTextActive: {\n    color: '#FFFFFF',\n  },\n  priceInput: {\n    backgroundColor: '#FFFFFF',\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#E8E8E8',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    fontSize: 16,\n    color: '#2C3E50',\n  },\n  currentPriceInfo: {\n    backgroundColor: '#FFFFFF',\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 20,\n    borderWidth: 1,\n    borderColor: '#E8E8E8',\n  },\n  currentPriceLabel: {\n    fontSize: 14,\n    color: '#7F8C8D',\n    marginBottom: 4,\n  },\n  currentPriceValue: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#2C3E50',\n  },\n  currentPriceSubtext: {\n    fontSize: 12,\n    color: '#7F8C8D',\n    marginTop: 4,\n  },\n  notificationPreview: {\n    marginTop: 20,\n  },\n  previewTitle: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#2C3E50',\n    marginBottom: 8,\n  },\n  notificationCard: {\n    backgroundColor: '#34495E',\n    borderRadius: 8,\n    padding: 16,\n  },\n  notificationTitle: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#FFFFFF',\n    marginBottom: 4,\n  },\n  notificationBody: {\n    fontSize: 14,\n    color: '#FFFFFF',\n    opacity: 0.9,\n  },\n});\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/CurrencyButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/CurrencyForecastCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/CurrencyModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/CurrencySelectionModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/DataSourceIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/EconomicIndicatorsCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[621,624],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[621,624],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1508,1511],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1508,1511],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2275,2278],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2275,2278],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nimport { ForecastIndicators } from '../app/types/ForecastTypes';\n\ninterface Props {\n  indicators: ForecastIndicators;\n}\n\nexport const EconomicIndicatorsCard: React.FC<Props> = ({ indicators }) => (\n  <View style={styles.container}>\n    <Text style={styles.title}>📈 ECONOMIC INDICATORS</Text>\n\n    <View style={styles.indicatorsList}>\n      <DXYIndicator dxy={indicators.dxy} />\n      <CentralBankRates rates={indicators.rates} />\n      <GDPIndicators gdp={indicators.gdp} />\n    </View>\n  </View>\n);\n\nconst DXYIndicator: React.FC<{ dxy: any }> = ({ dxy }) => (\n  <View style={styles.indicatorItem}>\n    <View style={styles.indicatorHeader}>\n      <Text style={styles.indicatorName}>💵 Dollar Index (DXY)</Text>\n      <Text\n        style={[\n          styles.indicatorValue,\n          {\n            color: dxy.changePercent > 0 ? '#16A085' : '#E74C3C',\n          },\n        ]}\n      >\n        {dxy.value}\n      </Text>\n    </View>\n    <Text style={styles.indicatorChange}>\n      {dxy.changePercent > 0 ? '+' : ''}\n      {dxy.changePercent}% today\n    </Text>\n    <View style={styles.indicatorBar}>\n      <View\n        style={[\n          styles.indicatorProgress,\n          {\n            width: `${Math.min(Math.abs(dxy.changePercent) * 50, 100)}%`,\n            backgroundColor: dxy.changePercent > 0 ? '#16A085' : '#E74C3C',\n          },\n        ]}\n      />\n    </View>\n  </View>\n);\n\nconst CentralBankRates: React.FC<{ rates: any }> = ({ rates }) => (\n  <View style={styles.indicatorItem}>\n    <View style={styles.indicatorHeader}>\n      <Text style={styles.indicatorName}>🏦 Central Bank Rates</Text>\n    </View>\n    <View style={styles.ratesGrid}>\n      <View style={styles.rateItem}>\n        <Text style={styles.rateLabel}>FED</Text>\n        <Text style={styles.rateValue}>{rates.fed}%</Text>\n      </View>\n      <View style={styles.rateItem}>\n        <Text style={styles.rateLabel}>ECB</Text>\n        <Text style={styles.rateValue}>{rates.ecb}%</Text>\n      </View>\n      <View style={styles.rateItem}>\n        <Text style={styles.rateLabel}>NBU</Text>\n        <Text style={styles.rateValue}>{rates.nbu}%</Text>\n      </View>\n    </View>\n  </View>\n);\n\nconst GDPIndicators: React.FC<{ gdp: any }> = ({ gdp }) => (\n  <View style={styles.indicatorItem}>\n    <View style={styles.indicatorHeader}>\n      <Text style={styles.indicatorName}>🏭 GDP Growth (annual)</Text>\n    </View>\n    <View style={styles.gdpGrid}>\n      <View style={styles.gdpItem}>\n        <Text style={styles.gdpCountry}>🇺🇸 USA</Text>\n        <Text\n          style={[\n            styles.gdpValue,\n            {\n              color: gdp.usa.trend === 'up' ? '#16A085' : '#E74C3C',\n            },\n          ]}\n        >\n          {gdp.usa.value}%\n        </Text>\n      </View>\n      <View style={styles.gdpItem}>\n        <Text style={styles.gdpCountry}>🇪🇺 EU</Text>\n        <Text\n          style={[\n            styles.gdpValue,\n            {\n              color: gdp.eu.trend === 'up' ? '#16A085' : '#E74C3C',\n            },\n          ]}\n        >\n          {gdp.eu.value}%\n        </Text>\n      </View>\n      <View style={styles.gdpItem}>\n        <Text style={styles.gdpCountry}>🇺🇦 Ukraine</Text>\n        <Text\n          style={[\n            styles.gdpValue,\n            {\n              color: gdp.ukraine.trend === 'up' ? '#16A085' : '#E74C3C',\n            },\n          ]}\n        >\n          {gdp.ukraine.value}%\n        </Text>\n      </View>\n    </View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    margin: 16,\n    backgroundColor: '#FFFFFF',\n    borderRadius: 12,\n    padding: 20,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#2C3E50',\n    marginBottom: 16,\n    textAlign: 'center',\n  },\n  indicatorsList: {\n    gap: 20,\n  },\n  indicatorItem: {\n    paddingBottom: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#E8E8E8',\n  },\n  indicatorHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  indicatorName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#2C3E50',\n  },\n  indicatorValue: {\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n  indicatorChange: {\n    fontSize: 14,\n    color: '#7F8C8D',\n    marginBottom: 8,\n  },\n  indicatorBar: {\n    height: 4,\n    backgroundColor: '#E8E8E8',\n    borderRadius: 2,\n    overflow: 'hidden',\n  },\n  indicatorProgress: {\n    height: '100%',\n    borderRadius: 2,\n  },\n  ratesGrid: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  rateItem: {\n    alignItems: 'center',\n    flex: 1,\n  },\n  rateLabel: {\n    fontSize: 12,\n    color: '#7F8C8D',\n    marginBottom: 4,\n  },\n  rateValue: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#2C3E50',\n  },\n  gdpGrid: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  gdpItem: {\n    alignItems: 'center',\n    flex: 1,\n  },\n  gdpCountry: {\n    fontSize: 12,\n    color: '#7F8C8D',\n    marginBottom: 4,\n  },\n  gdpValue: {\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n});\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/EditScreenInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/EmptyAlertsState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/ExternalLink.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/FilterPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/FooterSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/ForecastDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1153,1156],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1153,1156],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1863,1866],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1863,1866],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2473,2476],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2473,2476],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// app/(tabs)/components/ForecastDetails.tsx\nimport React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nimport { CurrencyForecast } from '../app/types/ForecastTypes';\nimport { getSpreadStatusColor } from '../utils/forecastUtils';\n\ninterface Props {\n  forecast: CurrencyForecast;\n}\n\nexport const ForecastDetails: React.FC<Props> = ({ forecast }) => (\n  <View style={styles.container}>\n    <KeyFactorsSection reasons={forecast.reasons} />\n\n    {forecast.targets && <TargetsSection targets={forecast.targets} />}\n\n    {forecast.technicalLevels && <TechnicalLevelsSection levels={forecast.technicalLevels} />}\n\n    {forecast.spreadAnalysis && <SpreadAnalysisSection analysis={forecast.spreadAnalysis} />}\n  </View>\n);\n\nconst KeyFactorsSection: React.FC<{ reasons: string[] }> = ({ reasons }) => (\n  <>\n    <Text style={styles.sectionTitle}>📊 KEY FACTORS:</Text>\n    {reasons.map((reason, index) => (\n      <View key={index} style={styles.reasonItem}>\n        <Text style={styles.reasonBullet}>•</Text>\n        <Text style={styles.reasonText}>{reason}</Text>\n      </View>\n    ))}\n  </>\n);\n\nconst TargetsSection: React.FC<{ targets: any }> = ({ targets }) => (\n  <>\n    <Text style={styles.sectionTitle}>🎯 TARGETS & RISKS:</Text>\n    <View style={styles.targetsContainer}>\n      <View style={styles.targetItem}>\n        <Text style={styles.targetLabel}>Target 📈</Text>\n        <Text style={[styles.targetValue, { color: '#16A085' }]}>\n          {targets.bullish?.target?.toFixed(2) || 'N/A'}₴\n        </Text>\n      </View>\n      <View style={styles.targetItem}>\n        <Text style={styles.targetLabel}>Stop 🛑</Text>\n        <Text style={[styles.targetValue, { color: '#E74C3C' }]}>\n          {targets.bullish?.stop?.toFixed(2) || 'N/A'}₴\n        </Text>\n      </View>\n    </View>\n  </>\n);\n\nconst TechnicalLevelsSection: React.FC<{ levels: any }> = ({ levels }) => (\n  <>\n    <Text style={styles.sectionTitle}>📈 TECHNICAL LEVELS:</Text>\n    <View style={styles.levelsContainer}>\n      <View style={styles.levelItem}>\n        <Text style={styles.levelLabel}>Support</Text>\n        <Text style={[styles.levelValue, { color: '#16A085' }]}>{levels.support}₴</Text>\n      </View>\n      <View style={styles.levelItem}>\n        <Text style={styles.levelLabel}>Resistance</Text>\n        <Text style={[styles.levelValue, { color: '#E74C3C' }]}>{levels.resistance}₴</Text>\n      </View>\n    </View>\n  </>\n);\n\nconst SpreadAnalysisSection: React.FC<{ analysis: any }> = ({ analysis }) => (\n  <>\n    <Text style={styles.sectionTitle}>💱 SPREAD ANALYSIS:</Text>\n    <View style={styles.spreadContainer}>\n      <Text style={styles.spreadText}>Spread: {analysis.percent.toFixed(2)}%</Text>\n      <View\n        style={[\n          styles.spreadBadge,\n          {\n            backgroundColor: getSpreadStatusColor(analysis.status),\n          },\n        ]}\n      >\n        <Text style={styles.spreadBadgeText}>{analysis.status}</Text>\n      </View>\n    </View>\n  </>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop: 20,\n    paddingTop: 20,\n    borderTopWidth: 1,\n    borderTopColor: '#E8E8E8',\n  },\n  sectionTitle: {\n    fontSize: 14,\n    fontWeight: 'bold',\n    color: '#2C3E50',\n    marginBottom: 12,\n    marginTop: 16,\n  },\n  reasonItem: {\n    flexDirection: 'row',\n    marginBottom: 8,\n  },\n  reasonBullet: {\n    color: '#2C3E50',\n    marginRight: 8,\n    fontSize: 16,\n  },\n  reasonText: {\n    flex: 1,\n    fontSize: 14,\n    color: '#34495E',\n    lineHeight: 20,\n  },\n  targetsContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 8,\n  },\n  targetItem: {\n    flex: 1,\n    alignItems: 'center',\n    backgroundColor: '#F8F9FA',\n    padding: 12,\n    borderRadius: 8,\n    marginHorizontal: 4,\n    borderWidth: 1,\n    borderColor: '#E8E8E8',\n  },\n  targetLabel: {\n    fontSize: 12,\n    color: '#7F8C8D',\n    marginBottom: 4,\n  },\n  targetValue: {\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  levelsContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 8,\n  },\n  levelItem: {\n    flex: 1,\n    alignItems: 'center',\n    backgroundColor: '#F8F9FA',\n    padding: 12,\n    borderRadius: 8,\n    marginHorizontal: 4,\n    borderWidth: 1,\n    borderColor: '#E8E8E8',\n  },\n  levelLabel: {\n    fontSize: 12,\n    color: '#7F8C8D',\n    marginBottom: 4,\n  },\n  levelValue: {\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  spreadContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    backgroundColor: '#F8F9FA',\n    padding: 12,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#E8E8E8',\n  },\n  spreadText: {\n    fontSize: 14,\n    color: '#2C3E50',\n    fontWeight: '500',\n  },\n  spreadBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n  },\n  spreadBadgeText: {\n    fontSize: 10,\n    fontWeight: 'bold',\n    color: '#FFFFFF',\n  },\n});\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/HistoryFilterPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/HistoryModals.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/MarketSentimentCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/NotificationSettingsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/OfflineIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/RatesSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/SettingItem.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[583,586],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[583,586],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { TouchableOpacity, Text, StyleSheet } from 'react-native';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\ninterface Props {\n  icon: string;\n  text: string;\n  value?: string;\n  onPress?: () => void;\n  showChevron?: boolean;\n  textColor?: string;\n  iconColor?: string;\n}\n\nexport const SettingItem: React.FC<Props> = ({\n  icon,\n  text,\n  value,\n  onPress,\n  showChevron = false,\n  textColor,\n  iconColor,\n}) => {\n  return (\n    <TouchableOpacity style={styles.settingItem} onPress={onPress}>\n      <MaterialCommunityIcons name={icon as any} size={24} color={iconColor || '#666666'} />\n      <Text style={[styles.settingText, { color: textColor || '#000000' }]}>{text}</Text>\n      {value && <Text style={styles.settingValue}>{value}</Text>}\n      {showChevron && <MaterialCommunityIcons name=\"chevron-right\" size={24} color=\"#666666\" />}\n    </TouchableOpacity>\n  );\n};\n\nconst styles = StyleSheet.create({\n  settingItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#e0e0e0',\n  },\n  settingText: {\n    flex: 1,\n    marginLeft: 16,\n    fontSize: 16,\n  },\n  settingValue: {\n    fontSize: 14,\n    marginRight: 8,\n    color: '#666666',\n  },\n});\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/StyledText.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/Themed.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/UpcomingEventsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/UpdateInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/UserAvatar.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[109,112],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[109,112],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\ninterface Props {\n  user: any;\n  isDark: boolean;\n}\n\nexport const UserAvatar: React.FC<Props> = ({ user, isDark }) => {\n  const getInitial = () => {\n    if (user?.displayName) {\n      return user.displayName[0].toUpperCase();\n    }\n    if (user?.email) {\n      return user.email[0].toUpperCase();\n    }\n    return 'U';\n  };\n\n  return (\n    <View style={styles.profileContainer}>\n      <View style={[styles.profileAvatar, { backgroundColor: isDark ? '#444444' : '#e0e0e0' }]}>\n        <Text style={[styles.profileInitial, { color: isDark ? '#ffffff' : '#000000' }]}>\n          {getInitial()}\n        </Text>\n      </View>\n      <View style={styles.profileInfo}>\n        <Text style={[styles.profileName, { color: isDark ? '#ffffff' : '#000000' }]}>\n          {user?.displayName || 'Пользователь'}\n        </Text>\n        <Text style={[styles.profileEmail, { color: isDark ? '#aaaaaa' : '#666666' }]}>\n          {user?.email || ''}\n        </Text>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  profileContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#e0e0e0',\n  },\n  profileAvatar: {\n    width: 50,\n    height: 50,\n    borderRadius: 25,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  profileInitial: {\n    fontSize: 22,\n    fontWeight: 'bold',\n  },\n  profileInfo: {\n    marginLeft: 16,\n    flex: 1,\n  },\n  profileName: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    marginBottom: 4,\n  },\n  profileEmail: {\n    fontSize: 14,\n  },\n});\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/UserProfileSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/__tests__/StyledText-test.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'it' is not defined.","line":6,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":3},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":9,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":9}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport renderer from 'react-test-renderer';\n\nimport { MonoText } from '../StyledText';\n\nit('renders correctly', () => {\n  const tree = renderer.create(<MonoText>Snapshot test!</MonoText>).toJSON();\n\n  expect(tree).toMatchSnapshot();\n});\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/charts/LineChart.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (215). Maximum allowed is 150.","line":34,"column":68,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":248,"endColumn":2},{"ruleId":"complexity","severity":2,"message":"Arrow function has a complexity of 21. Maximum allowed is 15.","line":34,"column":68,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":248,"endColumn":2}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// mobile-app/components/charts/LineChart.tsx\nimport React, { useMemo } from 'react';\nimport { View, Text, StyleSheet, Dimensions } from 'react-native';\nimport { LineChart } from 'react-native-chart-kit';\n\nimport { CHART_COLORS } from '../../constants/config';\nimport { useColorScheme } from '../../hooks/useColorScheme';\n\n// Обновленный интерфейс для новой структуры данных\ninterface CourseData {\n  data: Array<{\n    date: string;\n    course: {\n      banks?: {\n        ask: number;\n        bid: number;\n      };\n      nbu?: {\n        rate: number;\n        date: string;\n      };\n    };\n  }>;\n}\n\ninterface CurrencyLineChartProps {\n  data: CourseData;\n  title?: string;\n  currency: string;\n  baseCurrency: string;\n  showSellRate?: boolean;\n}\n\nexport const CurrencyLineChart: React.FC<CurrencyLineChartProps> = ({\n  data,\n  title,\n  currency,\n  baseCurrency,\n  showSellRate = true,\n}) => {\n  const colorScheme = useColorScheme();\n  const isDark = colorScheme === 'dark';\n  // Подготовка данных для графика\n  const { processedData, chartData, minValue, maxValue } = useMemo(() => {\n    if (!data || !data.data || data.data.length === 0) {\n      return {\n        processedData: [],\n        chartData: { labels: [], datasets: [] },\n        minValue: 0,\n        maxValue: 0,\n      };\n    }\n\n    // Отсортируем данные по дате в хронологическом порядке (от старых к новым)\n    const sortedData = [...data.data].sort(\n      (a, b) => new Date(a.date).getTime() - new Date(b.date).getTime()\n    );\n\n    // Формируем метки для оси X (даты)\n    const formattedLabels = sortedData.map((item, index) => {\n      const date = new Date(item.date);\n      // Показываем только каждую 2-ю метку, чтобы избежать скученности\n      return index % 2 === 0 ? `${date.getDate()}/${date.getMonth() + 1}` : '';\n    });\n\n    // Извлекаем значения курсов для обоих источников\n    const nbuRates = sortedData.map(item => {\n      if (item.course && item.course.nbu && item.course.nbu.rate) {\n        return item.course.nbu.rate;\n      }\n      return 0;\n    });\n\n    const bankBuyRates = sortedData.map(item => {\n      if (item.course && item.course.banks && item.course.banks.bid) {\n        return item.course.banks.bid;\n      }\n      return 0;\n    });\n\n    const bankSellRates = sortedData.map(item => {\n      if (item.course && item.course.banks && item.course.banks.ask) {\n        return item.course.banks.ask;\n      }\n      return 0;\n    });\n\n    // Удаляем нулевые значения для расчета min/max\n    const validNbuRates = nbuRates.filter(val => val > 0);\n    const validBankBuyRates = bankBuyRates.filter(val => val > 0);\n    const validBankSellRates = bankSellRates.filter(val => val > 0);\n\n    // Формируем данные для графика с тремя линиями\n    const chartDataObj = {\n      labels: formattedLabels,\n      datasets: [\n        {\n          data: nbuRates,\n          color: () => CHART_COLORS.BUY, // Зеленый для НБУ\n          strokeWidth: 2,\n        },\n        {\n          data: bankBuyRates,\n          color: () => '#3498db', // Синий для курса покупки банка\n          strokeWidth: 2,\n        },\n        ...(showSellRate\n          ? [\n              {\n                data: bankSellRates,\n                color: () => CHART_COLORS.SELL, // Красный для курса продажи банка\n                strokeWidth: 2,\n              },\n            ]\n          : []),\n      ],\n      legend: [],\n    };\n\n    // Рассчитываем минимальное и максимальное значения для оси Y с отступом\n    // Собираем все значения в один массив\n    const allValues = [...validNbuRates, ...validBankBuyRates, ...validBankSellRates].filter(\n      val => val > 0\n    );\n\n    if (allValues.length === 0) {\n      return {\n        processedData: sortedData,\n        chartData: chartDataObj,\n        minValue: 0,\n        maxValue: 0,\n      };\n    }\n\n    const min = Math.min(...allValues) * 0.99;\n    const max = Math.max(...allValues) * 1.01;\n\n    return {\n      processedData: sortedData,\n      chartData: chartDataObj,\n      minValue: min,\n      maxValue: max,\n    };\n  }, [data, showSellRate]);\n\n  // Рассчитываем размеры графика\n  const screenWidth = Dimensions.get('window').width;\n  const chartWidth = screenWidth - 48; // Учитываем поля и отступы контейнера\n\n  // Если нет данных, показываем соответствующее сообщение\n  if (!data || !data.data || data.data.length === 0 || processedData.length === 0) {\n    return (\n      <View\n        style={[styles.chartOuterContainer, { backgroundColor: isDark ? '#2c2c2e' : '#ffffff' }]}\n      >\n        <Text style={[styles.noDataText, { color: isDark ? '#ffffff' : '#000000' }]}>\n          No historical data available\n        </Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={[styles.chartOuterContainer, { backgroundColor: isDark ? '#2c2c2e' : '#ffffff' }]}>\n      <View style={styles.chartTitleContainer}>\n        <Text style={[styles.chartTitle, { color: isDark ? '#ffffff' : '#000000' }]}>\n          {title || `${currency} to ${baseCurrency} Exchange Rate`}\n        </Text>\n        <Text style={[styles.chartSubtitle, { color: isDark ? '#a9a9a9' : '#666666' }]}>\n          {`${currency}/${baseCurrency} - Comparison`}\n        </Text>\n      </View>\n\n      <View style={styles.chartWrapper}>\n        <LineChart\n          data={chartData}\n          width={chartWidth}\n          height={220}\n          chartConfig={{\n            backgroundColor: isDark ? '#1c1c1e' : '#ffffff',\n            backgroundGradientFrom: isDark ? '#1c1c1e' : '#ffffff',\n            backgroundGradientTo: isDark ? '#1c1c1e' : '#ffffff',\n            decimalPlaces: 2,\n            color: (opacity = 1) =>\n              isDark ? `rgba(255, 255, 255, ${opacity})` : `rgba(0, 0, 0, ${opacity})`,\n            labelColor: (opacity = 1) =>\n              isDark ? `rgba(255, 255, 255, ${opacity})` : `rgba(0, 0, 0, ${opacity})`,\n            style: {\n              borderRadius: 12,\n            },\n            propsForDots: {\n              r: '3',\n              strokeWidth: '1',\n              stroke: isDark ? '#1c1c1e' : '#ffffff',\n            },\n            propsForGrid: {\n              strokeDasharray: '',\n              stroke: isDark ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)',\n            },\n            formatYLabel: value => parseFloat(value).toFixed(2),\n            xAxisLabel: '',\n            yAxisSuffix: '',\n          }}\n          bezier\n          style={styles.chart}\n          withInnerLines={true}\n          withOuterLines={true}\n          withVerticalLines={false}\n          withHorizontalLines={true}\n          withVerticalLabels={true}\n          withHorizontalLabels={true}\n          fromZero={false}\n          yAxisMinValue={minValue}\n          yAxisMaxValue={maxValue}\n          withShadow={false}\n          horizontalLabelRotation={0}\n          xLabelsOffset={-10}\n          yLabelsOffset={6}\n        />\n      </View>\n\n      <View style={styles.legendContainer}>\n        <View style={styles.legendItem}>\n          <View style={[styles.colorBox, { backgroundColor: CHART_COLORS.BUY }]} />\n          <Text style={[styles.legendText, { color: isDark ? '#e4e4e4' : '#333333' }]}>\n            NBU Rate\n          </Text>\n        </View>\n\n        <View style={styles.legendItem}>\n          <View style={[styles.colorBox, { backgroundColor: '#3498db' }]} />\n          <Text style={[styles.legendText, { color: isDark ? '#e4e4e4' : '#333333' }]}>\n            Bank Buy\n          </Text>\n        </View>\n\n        {showSellRate && (\n          <View style={styles.legendItem}>\n            <View style={[styles.colorBox, { backgroundColor: CHART_COLORS.SELL }]} />\n            <Text style={[styles.legendText, { color: isDark ? '#e4e4e4' : '#333333' }]}>\n              Bank Sell\n            </Text>\n          </View>\n        )}\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  chartOuterContainer: {\n    // marginHorizontal: 16,\n    marginBottom: 16,\n    borderRadius: 12,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 2,\n    padding: 16,\n    overflow: 'hidden',\n  },\n  chartTitleContainer: {\n    marginBottom: 8,\n  },\n  chartTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n  chartSubtitle: {\n    fontSize: 14,\n    textAlign: 'center',\n    marginTop: 4,\n  },\n  chartWrapper: {\n    width: '100%',\n    height: 240,\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n  },\n  chart: {\n    marginVertical: 8,\n    borderRadius: 16,\n  },\n  legendContainer: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    marginTop: 12,\n    flexWrap: 'wrap',\n  },\n  legendItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginHorizontal: 8,\n    marginVertical: 4,\n  },\n  colorBox: {\n    width: 12,\n    height: 12,\n    borderRadius: 6,\n    marginRight: 6,\n  },\n  legendText: {\n    fontSize: 12,\n  },\n  noDataText: {\n    fontSize: 16,\n    textAlign: 'center',\n    marginVertical: 100,\n  },\n});\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/currency/CurrencyCard.tsx","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'react-native' import is duplicated.","line":3,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":3,"endColumn":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { StyleSheet, View, TouchableOpacity } from 'react-native';\nimport { Text } from 'react-native';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\ninterface CurrencyCardProps {\n  currencyCode: string; // Код валюты (например, USD, EUR)\n  currencyName: string; // Полное название валюты\n  rate: number; // Текущий курс\n  previousRate?: number; // Предыдущий курс для отображения изменений\n  onPress?: () => void; // Обработчик нажатия на карточку\n  isFavorite?: boolean; // Флаг для отображения избранной валюты\n  onToggleFavorite?: () => void; // Обработчик добавления/удаления из избранного\n}\n\nconst CurrencyCard: React.FC<CurrencyCardProps> = ({\n  currencyCode,\n  currencyName,\n  rate,\n  previousRate,\n  onPress,\n  isFavorite = false,\n  onToggleFavorite,\n}) => {\n  // Расчет изменения курса\n  const calculateChange = () => {\n    if (!previousRate) {\n      return { direction: 'neutral', percentage: 0 };\n    }\n\n    const change = rate - previousRate;\n    const percentage = (change / previousRate) * 100;\n\n    return {\n      direction: change === 0 ? 'neutral' : change > 0 ? 'up' : 'down',\n      percentage: Math.abs(percentage),\n    };\n  };\n\n  const { direction, percentage } = calculateChange();\n\n  return (\n    <TouchableOpacity style={styles.card} onPress={onPress} activeOpacity={0.7}>\n      <View style={styles.cardContent}>\n        <View style={styles.currencyInfo}>\n          <Text style={styles.currencyCode}>{currencyCode}</Text>\n          <Text style={styles.currencyName}>{currencyName}</Text>\n        </View>\n\n        <View style={styles.rateInfo}>\n          <Text style={styles.rate}>{rate.toFixed(4)}</Text>\n\n          <View style={styles.changeContainer}>\n            {direction !== 'neutral' && (\n              <MaterialCommunityIcons\n                name={direction === 'up' ? 'arrow-up' : 'arrow-down'}\n                size={16}\n                color={direction === 'up' ? '#4CAF50' : '#F44336'}\n                style={styles.changeIcon}\n              />\n            )}\n\n            <Text\n              style={[\n                styles.changePercentage,\n                direction === 'up'\n                  ? styles.positiveChange\n                  : direction === 'down'\n                    ? styles.negativeChange\n                    : styles.neutralChange,\n              ]}\n            >\n              {percentage.toFixed(2)}%\n            </Text>\n          </View>\n        </View>\n\n        {onToggleFavorite && (\n          <TouchableOpacity style={styles.favoriteButton} onPress={onToggleFavorite}>\n            <MaterialCommunityIcons\n              name={isFavorite ? 'star' : 'star-outline'}\n              size={24}\n              color={isFavorite ? '#FFC107' : '#757575'}\n            />\n          </TouchableOpacity>\n        )}\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: '#fff',\n    borderRadius: 10,\n    marginVertical: 8,\n    marginHorizontal: 16,\n    elevation: 3,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n  },\n  cardContent: {\n    flexDirection: 'row',\n    padding: 16,\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  currencyInfo: {\n    flex: 1,\n  },\n  currencyCode: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#2c3e50',\n  },\n  currencyName: {\n    fontSize: 14,\n    color: '#7f8c8d',\n    marginTop: 4,\n  },\n  rateInfo: {\n    alignItems: 'flex-end',\n    flex: 1,\n  },\n  rate: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#2c3e50',\n  },\n  changeContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginTop: 4,\n  },\n  changeIcon: {\n    marginRight: 4,\n  },\n  changePercentage: {\n    fontSize: 14,\n  },\n  positiveChange: {\n    color: '#4CAF50',\n  },\n  negativeChange: {\n    color: '#F44336',\n  },\n  neutralChange: {\n    color: '#7f8c8d',\n  },\n  favoriteButton: {\n    marginLeft: 16,\n  },\n});\n\nexport default CurrencyCard;\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/currency/CurrencyList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/currency/CurrencyRateCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/useClientOnlyValue.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/useClientOnlyValue.web.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/useColorScheme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/components/useColorScheme.web.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/constants/Colors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/constants/config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/contexts/AuthContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[201,204],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[201,204],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[428,431],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[428,431],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// contexts/AuthContext.tsx\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\nimport { auth, onAuthStateChanged } from '../firebase';\n\ninterface AuthContextType {\n  user: any | null;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<any | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, firebaseUser => {\n      if (firebaseUser) {\n        const userData = {\n          uid: firebaseUser.uid,\n          email: firebaseUser.email,\n          displayName: firebaseUser.displayName,\n        };\n        setUser(userData);\n      } else {\n        setUser(null);\n      }\n\n      setIsLoading(false);\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  const value = {\n    user,\n    isLoading,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/contexts/CurrencyContext.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'setInterval' is not defined.","line":79,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":79,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'clearInterval' is not defined.","line":86,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":86,"endColumn":31}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useState, useContext, useEffect, ReactNode } from 'react';\n\nimport { api, Currency, CurrencyRate } from '../services/api';\nimport { DEFAULT_CURRENCIES } from '../constants/config';\n\ninterface CurrencyContextType {\n  currencies: Currency[];\n  selectedCurrency: string;\n  baseCurrency: string;\n  availableCurrencies: string[];\n  currentRates: {\n    nbu: CurrencyRate[];\n    privatbank: CurrencyRate[];\n    interbank: CurrencyRate[];\n  };\n  loading: boolean;\n  error: string | null;\n  setSelectedCurrency: (currency: string) => void;\n  setBaseCurrency: (currency: string) => void;\n  refreshRates: () => Promise<void>;\n}\n\nconst CurrencyContext = createContext<CurrencyContextType | undefined>(undefined);\n\nexport const CurrencyProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [currencies, setCurrencies] = useState<Currency[]>([]);\n  const [selectedCurrency, setSelectedCurrency] = useState(DEFAULT_CURRENCIES.SELECTED[0]);\n  const [baseCurrency, setBaseCurrency] = useState(DEFAULT_CURRENCIES.BASE);\n  const [currentRates, setCurrentRates] = useState<{\n    nbu: CurrencyRate[];\n    privatbank: CurrencyRate[];\n    interbank: CurrencyRate[];\n  }>({ nbu: [], privatbank: [], interbank: [] });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Получение списка доступных валют\n  const fetchCurrencies = async () => {\n    try {\n      const currenciesData = await api.getAvailableCurrencies();\n      setCurrencies(currenciesData);\n    } catch (err) {\n      setError('Failed to fetch available currencies');\n      console.error('Error fetching currencies:', err);\n    }\n  };\n\n  // Получение текущих курсов валют\n  const fetchRates = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const ratesData = await api.getCurrentRates(baseCurrency, DEFAULT_CURRENCIES.SELECTED);\n\n      setCurrentRates(ratesData);\n    } catch (err) {\n      setError('Failed to fetch current rates');\n      console.error('Error fetching rates:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Обновление данных\n  const refreshRates = async () => {\n    await fetchRates();\n  };\n\n  // Получаем уникальные доступные валюты\n  const availableCurrencies = [...new Set(currencies?.map(c => c.code))];\n\n  // Инициализация данных\n  useEffect(() => {\n    fetchCurrencies();\n    fetchRates();\n\n    // Периодическое обновление курсов\n    const intervalId = setInterval(\n      () => {\n        fetchRates();\n      },\n      30 * 60 * 1000\n    ); // 30 минут\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n  // Обновление при изменении базовой валюты\n  useEffect(() => {\n    fetchRates();\n  }, [baseCurrency]);\n\n  const value: CurrencyContextType = {\n    currencies,\n    selectedCurrency,\n    baseCurrency,\n    availableCurrencies,\n    currentRates,\n    loading,\n    error,\n    setSelectedCurrency,\n    setBaseCurrency,\n    refreshRates,\n  };\n\n  return <CurrencyContext.Provider value={value}>{children}</CurrencyContext.Provider>;\n};\n\nexport const useCurrency = (): CurrencyContextType => {\n  const context = useContext(CurrencyContext);\n  if (context === undefined) {\n    throw new Error('useCurrency must be used within a CurrencyProvider');\n  }\n  return context;\n};\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/expo-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/firebase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/hooks/useAlerts.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[243,246],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[243,246],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[443,446],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[443,446],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\n\nimport { api } from '../services/api';\nimport { PriceAlert, AlertsStats, NewAlertForm } from '../app/types/AlertTypes';\n\nimport { useNotifications } from './useNotification';\n\nexport const useAlerts = (user: any) => {\n  const [alerts, setAlerts] = useState<PriceAlert[]>([]);\n  const [stats, setStats] = useState<AlertsStats | null>(null);\n  const [currentPrices, setCurrentPrices] = useState<Record<string, any>>({});\n  const { getPushToken } = useNotifications();\n\n  const loadAlerts = async () => {\n    if (!user) {\n      return;\n    }\n\n    try {\n      const userAlerts = await api.getUserPriceAlerts(user.uid);\n      setAlerts(userAlerts);\n    } catch (error) {\n      console.error('❌ Load alerts error:', error);\n      throw new Error('Failed to load alerts');\n    }\n  };\n\n  const loadStats = async () => {\n    if (!user) {\n      return;\n    }\n\n    try {\n      const userStats = await api.getPriceAlertsStats(user.uid);\n      setStats(userStats);\n    } catch (error) {\n      console.error('❌ Load stats error:', error);\n    }\n  };\n\n  const loadCurrentPrices = async () => {\n    try {\n      const rates = await api.getCurrentRatesForAlerts();\n      setCurrentPrices(rates);\n    } catch (error) {\n      console.error('❌ Load current prices error:', error);\n    }\n  };\n\n  const createAlert = async (formData: NewAlertForm) => {\n    if (!user) {\n      throw new Error('Please sign in to your account');\n    }\n\n    if (!formData.targetPrice || parseFloat(formData.targetPrice) <= 0) {\n      throw new Error('Please enter a valid price');\n    }\n\n    try {\n      const pushToken = await getPushToken(user.uid);\n\n      const alertData = {\n        userId: user.uid,\n        currencyPair: formData.currencyPair,\n        alertType: formData.alertType,\n        targetPrice: parseFloat(formData.targetPrice),\n        pushToken,\n      };\n\n      return await api.createPriceAlert(alertData);\n    } catch (error) {\n      console.error('❌ Create alert error:', error);\n      throw error;\n    }\n  };\n\n  const deleteAlert = async (alertId: string) => {\n    if (!user) {\n      throw new Error('User not authenticated');\n    }\n\n    try {\n      await api.deletePriceAlert(alertId, user.uid);\n    } catch (error) {\n      console.error('❌ Delete alert error:', error);\n      throw error;\n    }\n  };\n\n  return {\n    alerts,\n    stats,\n    currentPrices,\n    loadAlerts,\n    loadStats,\n    loadCurrentPrices,\n    createAlert,\n    deleteAlert,\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/hooks/useColorScheme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/hooks/useForecastData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/hooks/useNotification.ts","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·`","line":47,"column":13,"nodeType":null,"messageId":"delete","endLine":47,"endColumn":14,"fix":{"range":[1422,1423],"text":""}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport * as Notifications from 'expo-notifications';\nimport { Alert } from 'react-native';\n\nexport const useNotifications = () => {\n  const [pushToken, setPushToken] = useState<string>('');\n\n  const setupNotifications = async () => {\n    try {\n      const { status } = await Notifications.requestPermissionsAsync();\n      if (status !== 'granted') {\n        Alert.alert(\n          'Push Notifications',\n          'To receive price alerts, please enable notifications in settings'\n        );\n        return;\n      }\n\n      await Notifications.setNotificationCategoryAsync('price-alerts', [\n        {\n          identifier: 'view',\n          buttonTitle: 'View',\n          options: { foreground: true },\n        },\n      ]);\n\n      try {\n        const expoPushToken = await Notifications.getExpoPushTokenAsync();\n        setPushToken(expoPushToken.data);\n      } catch (tokenError) {\n        console.warn('⚠️ Push token failed:', tokenError.message);\n        setPushToken(`fallback_${Date.now()}`);\n      }\n    } catch (error) {\n      console.error('❌ Notification setup error:', error);\n    }\n  };\n\n  const getPushToken = async (userId: string): Promise<string> => {\n    if (pushToken && pushToken.includes('ExponentPushToken')) {\n      return pushToken;\n    }\n\n    try {\n      const expoPushToken = await Notifications.getExpoPushTokenAsync();\n      return expoPushToken.data;\n    } catch  {\n      return `fallback_${userId}_${Date.now()}`;\n    }\n  };\n\n  return {\n    setupNotifications,\n    getPushToken,\n    pushToken,\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/scripts/before-after-comparison.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'fs' is not defined.","line":92,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":92,"endColumn":5}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const createComparison = () => {\n  // Данные ДО рефакторинга (замените на реальные)\n  const before = {\n    totalFiles: 6,\n    linesOfCode: 1664, // alerts(486) + forecast(421) + converter(249) + home(232) + history(156) + settings(120)\n    averageComplexity: 20,\n    eslintErrors: 73,\n    eslintWarnings: 45,\n    filesWithIssues: 6,\n  };\n\n  // Данные ПОСЛЕ рефакторинга\n  const after = {\n    totalFiles: 35, // 6 главных + 29 компонентов\n    linesOfCode: 280, // примерно по 50 строк на главный файл\n    averageComplexity: 8,\n    eslintErrors: 1,\n    eslintWarnings: 3,\n    filesWithIssues: 1,\n  };\n\n  const improvements = {\n    linesReduction: Math.round(\n      ((before.linesOfCode - after.linesOfCode) / before.linesOfCode) * 100\n    ),\n    complexityReduction: Math.round(\n      ((before.averageComplexity - after.averageComplexity) / before.averageComplexity) * 100\n    ),\n    errorsReduction: Math.round(\n      ((before.eslintErrors - after.eslintErrors) / before.eslintErrors) * 100\n    ),\n    warningsReduction: Math.round(\n      ((before.eslintWarnings - after.eslintWarnings) / before.eslintWarnings) * 100\n    ),\n  };\n\n  const comparisonHTML = `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Сравнение до/после рефакторинга</title>\n    <style>\n        body { font-family: Arial; margin: 20px; }\n        .comparison { display: flex; gap: 20px; }\n        .before, .after { flex: 1; padding: 20px; border-radius: 10px; }\n        .before { background: #ffe6e6; }\n        .after { background: #e6ffe6; }\n        .improvement { background: #e6f3ff; padding: 15px; margin: 10px 0; border-radius: 5px; }\n        .big-number { font-size: 2em; font-weight: bold; color: #28a745; }\n    </style>\n</head>\n<body>\n    <h1>📊 Результаты рефакторинга</h1>\n    \n    <div class=\"comparison\">\n        <div class=\"before\">\n            <h2>❌ До рефакторинга</h2>\n            <p>Строк кода: <strong>${before.linesOfCode}</strong></p>\n            <p>Средняя сложность: <strong>${before.averageComplexity}</strong></p>\n            <p>ESLint ошибки: <strong>${before.eslintErrors}</strong></p>\n            <p>ESLint предупреждения: <strong>${before.eslintWarnings}</strong></p>\n        </div>\n        \n        <div class=\"after\">\n            <h2>✅ После рефакторинга</h2>\n            <p>Строк кода: <strong>${after.linesOfCode}</strong></p>\n            <p>Средняя сложность: <strong>${after.averageComplexity}</strong></p>\n            <p>ESLint ошибки: <strong>${after.eslintErrors}</strong></p>\n            <p>ESLint предупреждения: <strong>${after.eslintWarnings}</strong></p>\n        </div>\n    </div>\n\n    <h2>🚀 Улучшения</h2>\n    \n    <div class=\"improvement\">\n        <div class=\"big-number\">${improvements.linesReduction}%</div>\n        <p>Сокращение объема кода</p>\n    </div>\n    \n    <div class=\"improvement\">\n        <div class=\"big-number\">${improvements.complexityReduction}%</div>\n        <p>Снижение сложности</p>\n    </div>\n    \n    <div class=\"improvement\">\n        <div class=\"big-number\">${improvements.errorsReduction}%</div>\n        <p>Устранение ошибок</p>\n    </div>\n</body>\n</html>`;\n\n  fs.writeFileSync('reports/comparison.html', comparisonHTML);\n  console.log('📊 Отчет сравнения создан: reports/comparison.html');\n};\n\n// Запустить если вызван напрямую\nif (require.main === module) {\n  createComparison();\n}\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/scripts/collect-metrics.js","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":136,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":136,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const fs = require('fs');\nconst { execSync } = require('child_process');\n\nconsole.log('📊 Сбор метрик качества кода для диплома...\\n');\n\n// Создать папку отчетов\nif (!fs.existsSync('reports')) {\n  fs.mkdirSync('reports');\n}\n\n// Функция безопасного выполнения команд\nconst runCommand = (command, description) => {\n  try {\n    console.log(`⏳ ${description}...`);\n    const result = execSync(command, { encoding: 'utf8', stdio: 'pipe' });\n    console.log(`✅ ${description} - готово`);\n    return result;\n  } catch (error) {\n    console.log(`⚠️  ${description} - найдены проблемы`);\n    return error.stdout || '';\n  }\n};\n\n// 1. ESLint анализ\nrunCommand('npm run lint:json', 'ESLint JSON отчет');\nrunCommand('npm run lint:html', 'ESLint HTML отчет');\n\n// 2. TypeScript проверка\nrunCommand('npm run type-check > reports/typescript.txt 2>&1', 'TypeScript проверка');\n\n// 3. Prettier проверка\nrunCommand('npm run format:check > reports/prettier.txt 2>&1', 'Prettier проверка');\n\n// 4. Анализ метрик\nconst analyzeMetrics = () => {\n  try {\n    const eslintData = JSON.parse(fs.readFileSync('reports/eslint-report.json', 'utf8'));\n\n    const metrics = {\n      timestamp: new Date().toISOString(),\n      summary: {\n        totalFiles: eslintData.length,\n        totalErrors: eslintData.reduce((sum, file) => sum + file.errorCount, 0),\n        totalWarnings: eslintData.reduce((sum, file) => sum + file.warningCount, 0),\n        filesWithIssues: eslintData.filter(f => f.errorCount > 0 || f.warningCount > 0).length,\n      },\n      fileDetails: eslintData.map(file => ({\n        file: file.filePath.replace(process.cwd(), ''),\n        errors: file.errorCount,\n        warnings: file.warningCount,\n        lines: file.source ? file.source.split('\\n').length : 0,\n      })),\n      ruleBreakdown: {},\n    };\n\n    // Подсчет ошибок по правилам\n    eslintData.forEach(file => {\n      file.messages.forEach(msg => {\n        if (!metrics.ruleBreakdown[msg.ruleId]) {\n          metrics.ruleBreakdown[msg.ruleId] = 0;\n        }\n        metrics.ruleBreakdown[msg.ruleId]++;\n      });\n    });\n\n    // Сохранить метрики\n    fs.writeFileSync('reports/metrics.json', JSON.stringify(metrics, null, 2));\n\n    // Создать простой HTML отчет\n    const htmlReport = `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Метрики качества кода</title>\n    <style>\n        body { font-family: Arial; margin: 20px; }\n        .metric { background: #f5f5f5; padding: 15px; margin: 10px 0; border-radius: 5px; }\n        .good { border-left: 5px solid #28a745; }\n        .warning { border-left: 5px solid #ffc107; }\n        .error { border-left: 5px solid #dc3545; }\n        table { width: 100%; border-collapse: collapse; margin: 20px 0; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n    </style>\n</head>\n<body>\n    <h1>📊 Отчет качества кода</h1>\n    <p>Дата: ${new Date().toLocaleString('ru-RU')}</p>\n    \n    <div class=\"metric ${metrics.summary.totalErrors === 0 ? 'good' : 'error'}\">\n        <h3>Ошибки ESLint: ${metrics.summary.totalErrors}</h3>\n        <p>Критические проблемы в коде</p>\n    </div>\n    \n    <div class=\"metric ${metrics.summary.totalWarnings < 5 ? 'good' : 'warning'}\">\n        <h3>Предупреждения ESLint: ${metrics.summary.totalWarnings}</h3>\n        <p>Потенциальные проблемы</p>\n    </div>\n    \n    <div class=\"metric good\">\n        <h3>Проанализировано файлов: ${metrics.summary.totalFiles}</h3>\n        <p>Файлов с проблемами: ${metrics.summary.filesWithIssues}</p>\n    </div>\n\n    <h2>📁 Проблемные файлы</h2>\n    <table>\n        <tr><th>Файл</th><th>Ошибки</th><th>Предупреждения</th></tr>\n        ${metrics.fileDetails\n          .filter(f => f.errors > 0 || f.warnings > 0)\n          .map(f => `<tr><td>${f.file}</td><td>${f.errors}</td><td>${f.warnings}</td></tr>`)\n          .join('')}\n    </table>\n\n    <h2>📋 Топ нарушенных правил</h2>\n    <table>\n        <tr><th>Правило</th><th>Количество</th></tr>\n        ${Object.entries(metrics.ruleBreakdown)\n          .sort(([, a], [, b]) => b - a)\n          .slice(0, 10)\n          .map(([rule, count]) => `<tr><td>${rule}</td><td>${count}</td></tr>`)\n          .join('')}\n    </table>\n</body>\n</html>`;\n\n    fs.writeFileSync('reports/metrics.html', htmlReport);\n\n    console.log('\\n📈 ИТОГОВЫЕ МЕТРИКИ:');\n    console.log(`📁 Всего файлов: ${metrics.summary.totalFiles}`);\n    console.log(`❌ Ошибок: ${metrics.summary.totalErrors}`);\n    console.log(`⚠️  Предупреждений: ${metrics.summary.totalWarnings}`);\n    console.log(`🔥 Файлов с проблемами: ${metrics.summary.filesWithIssues}`);\n    console.log(\n      `✅ Процент качественного кода: ${Math.round(((metrics.summary.totalFiles - metrics.summary.filesWithIssues) / metrics.summary.totalFiles) * 100)}%`\n    );\n  } catch (error) {\n    console.log('⚠️  Не удалось проанализировать ESLint отчет');\n  }\n};\n\nanalyzeMetrics();\n\nconsole.log('\\n🎉 Сбор метрик завершен!');\nconsole.log('📁 Файлы сохранены в папку reports/');\nconsole.log('🌐 Откройте reports/metrics.html для просмотра');\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/services/api.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":156,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3084,3087],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3084,3087],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":331,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":331,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// mobile-app/services/api.ts\nimport axios from 'axios';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nimport { API_URL } from '../constants/config';\n\n// Базовая конфигурация axios\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Типы данных\nexport interface CurrencyRate {\n  source: string;\n  currency: string;\n  baseCurrency: string;\n  buy: number;\n  sell: number;\n  date: string;\n  timestamp: number;\n  type?: string;\n}\n\nexport interface RatesResponse {\n  nbu: CurrencyRate[];\n  banks: CurrencyRate[];\n  black: CurrencyRate[];\n  timestamp: number;\n}\n\nexport interface HistoricalRateData {\n  date: string;\n  source: string;\n  buy: {\n    avg: number;\n    min: number;\n    max: number;\n  };\n  sell: {\n    avg: number;\n    min: number;\n    max: number;\n  };\n}\n\nexport interface Currency {\n  code: string;\n  name: string;\n  symbol: string;\n}\n\nexport interface ForecastData {\n  date: string;\n  currency: string;\n  baseCurrency: string;\n  buy: number;\n  sell: number;\n  confidence: number;\n  trend?: string;\n  volatility?: number;\n  rsi?: number;\n}\n\n// Типы для NBU конвертера\nexport interface NBURate {\n  r030: number; // Код валюты\n  txt: string; // Название валюты на украинском\n  rate: number; // Курс к гривне\n  cc: string; // Код валюты (USD, EUR, etc.)\n  exchangedate: string; // Дата курса\n}\n\nexport interface CurrencyForConverter {\n  code: string;\n  name: string;\n  rate: number; // Курс к UAH\n  symbol?: string;\n}\n\n// ============ ТИПЫ ДЛЯ ФУНДАМЕНТАЛЬНОГО АНАЛИЗА ============\nexport interface FundamentalDashboard {\n  indicators: {\n    dxy: {\n      value: number;\n      change: number;\n      changePercent: number;\n      trend: 'up' | 'down' | 'sideways';\n    };\n    rates: {\n      fed: number;\n      ecb: number;\n      nbu: number;\n      difference: number;\n    };\n    gdp: {\n      usa: { value: number; trend: string };\n      eu: { value: number; trend: string };\n      ukraine: { value: number; trend: string };\n    };\n  };\n  forecasts: {\n    USDUAH: {\n      direction: 'bullish' | 'bearish' | 'sideways';\n      confidence: number;\n      reasons: string[];\n    };\n    EURUAH: {\n      direction: 'bullish' | 'bearish' | 'sideways';\n      confidence: number;\n      reasons: string[];\n    };\n  };\n  upcomingEvents: Array<{\n    date: string;\n    event: string;\n    currency: string;\n    impact: string;\n    description: string;\n  }>;\n  lastUpdate: string;\n}\n\nexport interface DXYData {\n  value: number;\n  change: number;\n  changePercent: number;\n  trend: 'up' | 'down' | 'sideways';\n}\n\nexport interface InterestRatesData {\n  fed: number;\n  ecb: number;\n  nbu: number;\n  difference: number;\n}\n\nexport interface GDPData {\n  usa: { value: number; trend: string };\n  eu: { value: number; trend: string };\n  ukraine: { value: number; trend: string };\n}\n\nexport interface EconomicEvent {\n  date: string;\n  event: string;\n  currency: string;\n  impact: string;\n  description: string;\n}\n\n// Кеширование данных в AsyncStorage\nconst cacheData = async (key: string, data: any, ttl: number) => {\n  try {\n    const item = {\n      data,\n      expiry: Date.now() + ttl,\n    };\n    await AsyncStorage.setItem(key, JSON.stringify(item));\n  } catch (error) {\n    console.error('Error caching data:', error);\n  }\n};\n\n// Получение кешированных данных\nconst getCachedData = async (key: string) => {\n  try {\n    const value = await AsyncStorage.getItem(key);\n    if (!value) {\n      return null;\n    }\n\n    const item = JSON.parse(value);\n    if (Date.now() > item.expiry) {\n      await AsyncStorage.removeItem(key);\n      return null;\n    }\n    return item.data;\n  } catch (error) {\n    console.error('Error getting cached data:', error);\n    return null;\n  }\n};\n\nexport const api = {\n  getAvailableCurrencies: async (): Promise<Currency[]> => {\n    try {\n      const response = await axiosInstance.get('/currencies');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching currencies:', error);\n      throw error;\n    }\n  },\n\n  // Получение текущих курсов валют\n  getCurrentRates: async (\n    baseCurrency = 'UAH',\n    currencies = ['USD', 'EUR']\n  ): Promise<RatesResponse> => {\n    try {\n      const response = await axiosInstance.get('/rates', {\n        params: {\n          base: baseCurrency,\n          currencies: currencies.join(','),\n        },\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching historical rates:', error);\n      throw error;\n    }\n  },\n\n  // Получение исторических данных\n  getHistoricalRates: async (params: {\n    currency?: string;\n    period?: string;\n  }): Promise<HistoricalRateData[]> => {\n    try {\n      const response = await axiosInstance.get('/history', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching historical rates:', error);\n      throw error;\n    }\n  },\n\n  // ============ КОНВЕРТЕР ВАЛЮТ ============\n\n  // Получение курсов НБУ для конвертера (через ваш бэкенд)\n  getRatesForConverter: async (): Promise<NBURate[]> => {\n    try {\n      const response = await axiosInstance.get('/converter');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching converter rates:', error);\n      throw error;\n    }\n  },\n\n  // ============ ФУНДАМЕНТАЛЬНЫЙ АНАЛИЗ ============\n\n  // Получение полного фундаментального анализа (ГЛАВНЫЙ МЕТОД)\n  getFundamentalDashboard: async (): Promise<FundamentalDashboard> => {\n    const cacheKey = 'fundamental_dashboard';\n    const cached = await getCachedData(cacheKey);\n\n    if (cached) {\n      return cached;\n    }\n\n    try {\n      const response = await axiosInstance.get('/fundamental-analysis');\n      const data = response.data;\n\n      // Кешируем на 15 минут (фундаментальные данные меняются медленно)\n      await cacheData(cacheKey, data, 15 * 60 * 1000);\n      return data;\n    } catch (error) {\n      console.error('Error fetching fundamental dashboard:', error);\n      throw new Error('Не удалось получить фундаментальный анализ');\n    }\n  },\n\n  // ============ PRICE ALERTS ============\n\n  // Создание алерта\n  createPriceAlert: async (alertData: {\n    userId: string;\n    currencyPair: 'USDUAH' | 'EURUAH';\n    alertType: 'above' | 'below';\n    targetPrice: number;\n    pushToken: string;\n  }) => {\n    try {\n      const response = await axiosInstance.post('/alerts', alertData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating price alert:', error);\n      throw error;\n    }\n  },\n\n  // Получение алертов пользователя\n  getUserPriceAlerts: async (userId: string) => {\n    try {\n      const response = await axiosInstance.get(`/alerts/user/${userId}`);\n      return response.data.alerts || [];\n    } catch (error) {\n      console.error('Error fetching user alerts:', error);\n      throw error;\n    }\n  },\n\n  // Удаление алерта\n  deletePriceAlert: async (alertId: string, userId: string) => {\n    try {\n      const response = await axiosInstance.delete(`/alerts/${alertId}`, {\n        data: { userId },\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting alert:', error);\n      throw error;\n    }\n  },\n\n  // Статистика алертов\n  getPriceAlertsStats: async (userId: string) => {\n    try {\n      const response = await axiosInstance.get(`/alerts/user/${userId}/stats`);\n      return response.data.stats;\n    } catch (error) {\n      console.error('Error fetching alerts stats:', error);\n      return { active: 0, triggered: 0, total: 0 };\n    }\n  },\n  getCurrentRatesForAlerts: async (currencies = ['USD', 'EUR']) => {\n    try {\n      // Можем передать конкретные валюты в параметрах\n      const currenciesParam = currencies.join(',');\n      const response = await axiosInstance.get('/alerts/rates', {\n        params: { currencies: currenciesParam },\n      });\n\n      return response.data;\n    } catch (error) {\n      // Fallback значения\n      const fallbackRates = {};\n      currencies.forEach(currency => {\n        const pairKey = `${currency}UAH`;\n        fallbackRates[pairKey] = {\n          market: currency === 'USD' ? 41.8 : 44.6,\n          currency,\n          name: `${currency} (fallback)`,\n        };\n      });\n\n      return fallbackRates;\n    }\n  },\n  // ============ УТИЛИТЫ ============\n\n  // Очистить кеш фундаментального анализа\n  clearFundamentalCache: async (): Promise<void> => {\n    try {\n      const fundamentalKeys = [\n        'fundamental_dashboard',\n        'dxy_data',\n        'fundamental_rates',\n        'fundamental_gdp',\n        'economic_events',\n      ];\n\n      await Promise.all(fundamentalKeys.map(key => AsyncStorage.removeItem(key)));\n    } catch (error) {\n      console.error('Error clearing fundamental cache:', error);\n    }\n  },\n\n  // Принудительное обновление всех фундаментальных данных\n  refreshFundamentalData: async (): Promise<FundamentalDashboard> => {\n    try {\n      // Очищаем кеш\n      await api.clearFundamentalCache();\n\n      // Получаем свежие данные\n      return await api.getFundamentalDashboard();\n    } catch (error) {\n      console.error('Error refreshing fundamental data:', error);\n      throw new Error('Не удалось обновить фундаментальные данные');\n    }\n  },\n};\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/store/hook.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/store/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/store/slices/appSlice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/store/slices/converterSlice.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[754,757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[754,757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1853,1856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1853,1856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport NetInfo from '@react-native-community/netinfo';\n\nimport { api, NBURate } from '../../services/api';\n\ninterface ConverterState {\n  rates: NBURate[]; // All NBU rates to UAH\n  isLoading: boolean;\n  error: string | null;\n  lastUpdated: string | null;\n  fromCurrency: string;\n  toCurrency: string;\n  amount: string;\n}\n\nconst initialState: ConverterState = {\n  rates: [],\n  isLoading: false,\n  error: null,\n  lastUpdated: null,\n  fromCurrency: 'USD',\n  toCurrency: 'EUR',\n  amount: '1',\n};\n\nexport const fetchConverterRates = createAsyncThunk(\n  'converter/fetchConverterRates',\n  async (_, { getState, rejectWithValue }) => {\n    try {\n      const state = getState() as any;\n      const currentState = state.converter;\n      const isOffline = state.app.isOffline;\n\n      if (isOffline) {\n        if (currentState.rates && currentState.rates.length > 0) {\n          return {\n            rates: currentState.rates,\n            lastUpdated: currentState.lastUpdated,\n          };\n        } else {\n          return rejectWithValue('No internet connection and no cached data');\n        }\n      }\n\n      const netState = await NetInfo.refresh();\n      if (!netState.isConnected) {\n        if (currentState.rates && currentState.rates.length > 0) {\n          return {\n            rates: currentState.rates,\n            lastUpdated: currentState.lastUpdated,\n          };\n        } else {\n          return rejectWithValue('No internet connection and no cached data');\n        }\n      }\n\n      const allRates = await api.getRatesForConverter();\n      if (!allRates || allRates.length === 0) {\n        throw new Error('No rates data received from API');\n      }\n\n      return {\n        rates: allRates,\n        lastUpdated: new Date().toISOString(),\n      };\n    } catch (error: any) {\n      return rejectWithValue(error.message || 'Failed to fetch converter rates');\n    }\n  }\n);\n\nconst converterSlice = createSlice({\n  name: 'converter',\n  initialState,\n  reducers: {\n    setFromCurrency: (state, action: PayloadAction<string>) => {\n      state.fromCurrency = action.payload;\n    },\n    setToCurrency: (state, action: PayloadAction<string>) => {\n      state.toCurrency = action.payload;\n    },\n    setAmount: (state, action: PayloadAction<string>) => {\n      state.amount = action.payload;\n    },\n    swapCurrencies: state => {\n      const temp = state.fromCurrency;\n      state.fromCurrency = state.toCurrency;\n      state.toCurrency = temp;\n    },\n    clearError: state => {\n      state.error = null;\n    },\n  },\n  extraReducers: builder => {\n    builder\n      .addCase(fetchConverterRates.pending, state => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(fetchConverterRates.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.error = null;\n        state.rates = action.payload.rates;\n        state.lastUpdated = action.payload.lastUpdated;\n      })\n      .addCase(fetchConverterRates.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload as string;\n      });\n  },\n});\n\nexport const { setFromCurrency, setToCurrency, setAmount, swapCurrencies, clearError } =\n  converterSlice.actions;\n\n// Selectors\nexport const selectConverterRates = (state: { converter: ConverterState }) => state.converter.rates;\nexport const selectConverterLoading = (state: { converter: ConverterState }) =>\n  state.converter.isLoading;\nexport const selectConverterError = (state: { converter: ConverterState }) => state.converter.error;\nexport const selectConverterLastUpdated = (state: { converter: ConverterState }) =>\n  state.converter.lastUpdated;\nexport const selectFromCurrency = (state: { converter: ConverterState }) =>\n  state.converter.fromCurrency;\nexport const selectToCurrency = (state: { converter: ConverterState }) =>\n  state.converter.toCurrency;\nexport const selectAmount = (state: { converter: ConverterState }) => state.converter.amount;\n\n// Build available currencies from rates\nexport const selectConverterCurrencies = (state: { converter: ConverterState }) => {\n  const rates = state.converter.rates;\n  if (!rates || rates.length === 0) {\n    return [];\n  }\n  // Always include UAH\n  const uah = { code: 'UAH', name: 'Ukrainian Hryvnia', rate: 1 };\n  return [\n    uah,\n    ...rates.map(r => ({\n      code: r.cc,\n      name: r.txt,\n      rate: r.rate,\n    })),\n  ];\n};\n\n// Calculate converted amount\nexport const selectConvertedAmount = (state: { converter: ConverterState }) => {\n  const { rates, fromCurrency, toCurrency, amount } = state.converter;\n  if (!amount || isNaN(Number(amount))) {\n    return '';\n  }\n  const amt = parseFloat(amount);\n\n  if (fromCurrency === toCurrency) {\n    return amt.toString();\n  }\n\n  // Find rates to UAH\n  const getRateToUAH = (cc: string) => {\n    if (cc === 'UAH') {\n      return 1;\n    }\n    const found = rates.find(r => r.cc === cc);\n    return found ? found.rate : null;\n  };\n\n  const fromRate = getRateToUAH(fromCurrency);\n  const toRate = getRateToUAH(toCurrency);\n\n  if (!fromRate || !toRate) {\n    return '';\n  }\n\n  // Convert: amount in FROM -> UAH -> TO\n  const amountInUAH = amt * fromRate;\n  const result = amountInUAH / toRate;\n  return result.toString();\n};\n\n// Data freshness\nexport const selectConverterDataFreshness = (state: { converter: ConverterState }) => {\n  if (!state.converter.lastUpdated) {\n    return null;\n  }\n  const lastUpdated = new Date(state.converter.lastUpdated);\n  const now = new Date();\n  const diffInHours = (now.getTime() - lastUpdated.getTime()) / (1000 * 60 * 60);\n  return {\n    lastUpdated: state.converter.lastUpdated,\n    hoursAgo: Math.floor(diffInHours),\n    isStale: diffInHours > 12,\n  };\n};\n\nexport default converterSlice.reducer;\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/store/slices/currencySlice.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[764,767],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[764,767],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1662,1665],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1662,1665],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2373,2376],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2373,2376],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// store/slices/currencySlice.ts\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport { api, RatesResponse } from '../../services/api';\nimport { DEFAULT_CURRENCIES } from '../../constants/config';\n\ninterface CurrencyState {\n  rates: RatesResponse | null;\n  isLoading: boolean;\n  error: string | null;\n  lastUpdated: string | null; // Timestamp последнего успешного обновления\n}\n\nconst initialState: CurrencyState = {\n  rates: null,\n  isLoading: false,\n  error: null,\n  lastUpdated: null,\n};\n\n// Thunk для загрузки курсов валют\nexport const fetchRates = createAsyncThunk(\n  'currency/fetchRates',\n  async (currencies: string[], { getState, rejectWithValue }) => {\n    try {\n      // Получаем текущее состояние\n      const state = getState() as any;\n      const currentState = state.currency;\n      const isOffline = state.app.isOffline; // Используем глобальное состояние сети\n      // Если оффлайн, но есть кешированные данные, возвращаем их с флагом оффлайн\n      if (isOffline) {\n        if (currentState.rates) {\n          return {\n            ...currentState.rates,\n            // Сохраняем оригинальную отметку времени\n            lastUpdated: currentState.lastUpdated,\n          };\n        } else {\n          return rejectWithValue('Отсутствует подключение к интернету и нет кешированных данных');\n        }\n      }\n\n      // Если онлайн, загружаем свежие данные\n      const data = await api.getCurrentRates(DEFAULT_CURRENCIES.BASE, currencies);\n\n      // Возвращаем с обновленной отметкой времени и выключенным флагом оффлайн\n      return {\n        ...data,\n        lastUpdated: new Date().toISOString(),\n      };\n    } catch (error: any) {\n      return rejectWithValue(error.message || 'Не удалось загрузить курсы валют');\n    }\n  }\n);\n\nconst currencySlice = createSlice({\n  name: 'currency',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(fetchRates.pending, state => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(fetchRates.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.rates = action.payload;\n        state.lastUpdated = action.payload.lastUpdated;\n\n        // Извлекаем доступные банки из полученных данных\n        const banks: string[] = [];\n        if (action.payload.banks) {\n          action.payload.banks.forEach((rate: any) => {\n            if (rate.source && !banks.includes(rate.source)) {\n              banks.push(rate.source);\n            }\n          });\n        }\n      })\n      .addCase(fetchRates.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload as string;\n        // Если данные загружались ранее, помечаем их как оффлайн\n      });\n  },\n});\n\nexport default currencySlice.reducer;\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/store/slices/forecastSlice.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1139,1142],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1139,1142],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2150,2153],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2150,2153],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// store/slices/forecastSlice.ts\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport { api, ForecastData } from '../../services/api';\n\n// Enum for forecast methods\nexport enum ForecastMethod {\n  LINEAR = 'linear',\n  ADVANCED = 'advanced',\n  MACHINE_LEARNING = 'ml',\n}\n\n// Fixed forecast days by method\nexport const FORECAST_DAYS = {\n  [ForecastMethod.LINEAR]: 7,\n  [ForecastMethod.ADVANCED]: 14,\n  [ForecastMethod.MACHINE_LEARNING]: 30,\n};\n\n// Параметры для запроса прогноза\nexport interface ForecastParams {\n  currency: string;\n  method: ForecastMethod;\n}\n\n// Состояние slice\ninterface ForecastState {\n  forecastData: ForecastData[];\n  isLoading: boolean;\n  error: string | null;\n  lastUpdated: string | null;\n}\n\n// Начальное состояние\nconst initialState: ForecastState = {\n  forecastData: [],\n  isLoading: false,\n  error: null,\n  lastUpdated: null,\n};\n\n// Async thunk для получения прогноза\nexport const fetchForecast = createAsyncThunk(\n  'forecast/fetchForecast',\n  async (params: ForecastParams, { getState, rejectWithValue }) => {\n    try {\n      // Получаем текущее состояние\n      const state = getState() as any;\n      const currentState = state.forecast;\n      const isOffline = state.app.isOffline; // Используем глобальное состояние сети\n\n      // Если оффлайн, но есть кешированные данные, возвращаем их\n      if (isOffline) {\n        if (currentState.forecastData && currentState.forecastData.length > 0) {\n          return {\n            data: currentState.forecastData,\n            lastUpdated: currentState.lastUpdated,\n          };\n        } else {\n          return rejectWithValue('Отсутствует подключение к интернету и нет кешированных данных');\n        }\n      }\n\n      // Если онлайн, загружаем свежие данные\n      const forecastResult = await api.getForecast({\n        currency: params.currency.toLowerCase(),\n        method: params.method,\n      });\n\n      if (!forecastResult || forecastResult.length === 0) {\n        throw new Error('No forecast data could be generated');\n      }\n\n      return {\n        data: forecastResult,\n        lastUpdated: new Date().toISOString(),\n      };\n    } catch (error: any) {\n      return rejectWithValue(error.message || 'Failed to fetch forecast');\n    }\n  }\n);\n\n// Slice\nconst forecastSlice = createSlice({\n  name: 'forecast',\n  initialState,\n  reducers: {\n    // Очистка ошибки\n    clearError: state => {\n      state.error = null;\n    },\n    // Очистка всех данных прогноза\n    clearForecastData: state => {\n      state.forecastData = [];\n      state.error = null;\n      state.lastUpdated = null;\n    },\n  },\n  extraReducers: builder => {\n    builder\n      // Начало загрузки\n      .addCase(fetchForecast.pending, state => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      // Успешная загрузка\n      .addCase(fetchForecast.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.error = null;\n        state.forecastData = action.payload.data;\n        state.lastUpdated = action.payload.lastUpdated;\n      })\n      // Ошибка загрузки\n      .addCase(fetchForecast.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload as string;\n        // Не очищаем данные при ошибке - они могут быть из кеша\n      });\n  },\n});\n\n// Экспортируем actions\nexport const { clearError, clearForecastData } = forecastSlice.actions;\n\n// Селекторы\nexport const selectForecastData = (state: { forecast: ForecastState }) =>\n  state.forecast.forecastData;\nexport const selectForecastLoading = (state: { forecast: ForecastState }) =>\n  state.forecast.isLoading;\nexport const selectForecastError = (state: { forecast: ForecastState }) => state.forecast.error;\nexport const selectForecastLastUpdated = (state: { forecast: ForecastState }) =>\n  state.forecast.lastUpdated;\n\n// Экспортируем reducer\nexport default forecastSlice.reducer;\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/store/slices/historySlice.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[867,870],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[867,870],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// store/slices/historySlice.ts\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport { api } from '../../services/api';\n\n// Типы данных\n\ninterface HistoryState {\n  historicalData: []; // Объект для хранения исторических данных по валютам и периодам\n  isLoading: boolean;\n  error: object | null;\n  lastUpdated: object | null;\n}\n\n// Начальное состояние\nconst initialState: HistoryState = {\n  historicalData: [], // Объект для хранения исторических данных по валютам и периодам\n  isLoading: false,\n  error: null,\n  lastUpdated: null,\n};\n\n// Thunk для загрузки исторических данных\nexport const fetchHistoricalRates = createAsyncThunk(\n  'history/fetchHistoricalRates',\n  async (params: { currency: string; period: string }, { getState, rejectWithValue }) => {\n    try {\n      // Используем глобальное состояние сети\n      const state = getState() as any;\n      const isOffline = state.app.isOffline;\n      const currentState = state.history;\n\n      if (isOffline) {\n        if (currentState?.historicalData) {\n          return {\n            data: currentState?.historicalData,\n            lastUpdated: currentState.lastUpdated,\n          };\n        } else {\n          return rejectWithValue('Нет подключения к интернету и отсутствуют кэшированные данные');\n        }\n      }\n\n      const data = await api.getHistoricalRates(params);\n\n      return {\n        ...data,\n        lastUpdated: new Date().toISOString(),\n      };\n    } catch (error) {\n      return rejectWithValue(\n        (error as Error).message || 'Не удалось загрузить исторические данные'\n      );\n    }\n  }\n);\n\n// Срез для истории курсов\nconst historySlice = createSlice({\n  name: 'history',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(fetchHistoricalRates.pending, state => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(fetchHistoricalRates.fulfilled, (state, action) => {\n        state.isLoading = false;\n        // Сохраняем данные в кэш по ключу\n        const { data, lastUpdated } = action.payload;\n        // Обновляем кэш и метки времени\n        state.historicalData = data;\n\n        // Обновляем общую метку времени\n        state.lastUpdated = lastUpdated;\n      })\n      .addCase(fetchHistoricalRates.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload || 'Произошла ошибка при загрузке данных';\n      });\n  },\n});\n\nexport default historySlice.reducer;\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/types/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/utils/converter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/emadhamad/Desktop/CurrencyTracker/mobile-app/utils/forecastUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]}]